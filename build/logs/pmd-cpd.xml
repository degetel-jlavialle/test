<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
  <duplication lines="43" tokens="92">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="475"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="521"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="567"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="751"/>
    <codefragment>db_create_table('cache', array(
  'fields' =&gt; array(
    'cid' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'data' =&gt; array(
      'type' =&gt; 'blob',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
    'expire' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'created' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'headers' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'serialized' =&gt; array(
      'type' =&gt; 'int',
      'size' =&gt; 'small',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'indexes' =&gt; array(
    'expire' =&gt; array(
      'expire',
    ),
  ),
  'primary key' =&gt; array(
    'cid',
  ),
  'module' =&gt; 'system',
</codefragment>
  </duplication>
  <duplication lines="44" tokens="95">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="475"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="613"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="659"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="705"/>
    <codefragment>db_create_table('cache', array(
  'fields' =&gt; array(
    'cid' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'data' =&gt; array(
      'type' =&gt; 'blob',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
    'expire' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'created' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'headers' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'serialized' =&gt; array(
      'type' =&gt; 'int',
      'size' =&gt; 'small',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'indexes' =&gt; array(
    'expire' =&gt; array(
      'expire',
    ),
  ),
  'primary key' =&gt; array(
    'cid',
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'cache',
</codefragment>
  </duplication>
  <duplication lines="79" tokens="173">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="17"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="26"/>
    <codefragment>db_create_table('access', array(
  'fields' =&gt; array(
    'aid' =&gt; array(
      'type' =&gt; 'serial',
      'not null' =&gt; TRUE,
    ),
    'mask' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'type' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'status' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
  ),
  'primary key' =&gt; array(
    'aid',
  ),
  'module' =&gt; 'user',
  'name' =&gt; 'access',
));

db_create_table('actions', array(
  'fields' =&gt; array(
    'aid' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '0',
    ),
    'type' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 32,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'callback' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'parameters' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
      'size' =&gt; 'big',
    ),
    'description' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '0',
    ),
  ),
  'primary key' =&gt; array(
    'aid',
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'actions',
));
db_insert('actions')-&gt;fields(array(
  'aid',
  'type',
  'callback',
  'parameters',
  'description',
))
-&gt;values(array(
  'aid' =&gt; 'node_make_sticky_action',
</codefragment>
  </duplication>
  <duplication lines="704" tokens="1527">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="94"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="117"/>
    <codefragment>-&gt;values(array(
  'aid' =&gt; 'node_make_sticky_action',
  'type' =&gt; 'node',
  'callback' =&gt; 'node_make_sticky_action',
  'parameters' =&gt; '',
  'description' =&gt; 'Make post sticky',
))
-&gt;values(array(
  'aid' =&gt; 'node_make_unsticky_action',
  'type' =&gt; 'node',
  'callback' =&gt; 'node_make_unsticky_action',
  'parameters' =&gt; '',
  'description' =&gt; 'Make post unsticky',
))
-&gt;values(array(
  'aid' =&gt; 'node_promote_action',
  'type' =&gt; 'node',
  'callback' =&gt; 'node_promote_action',
  'parameters' =&gt; '',
  'description' =&gt; 'Promote post to front page',
))
-&gt;values(array(
  'aid' =&gt; 'node_publish_action',
  'type' =&gt; 'node',
  'callback' =&gt; 'node_publish_action',
  'parameters' =&gt; '',
  'description' =&gt; 'Publish post',
))
-&gt;values(array(
  'aid' =&gt; 'node_save_action',
  'type' =&gt; 'node',
  'callback' =&gt; 'node_save_action',
  'parameters' =&gt; '',
  'description' =&gt; 'Save post',
))
-&gt;values(array(
  'aid' =&gt; 'node_unpromote_action',
  'type' =&gt; 'node',
  'callback' =&gt; 'node_unpromote_action',
  'parameters' =&gt; '',
  'description' =&gt; 'Remove post from front page',
))
-&gt;values(array(
  'aid' =&gt; 'node_unpublish_action',
  'type' =&gt; 'node',
  'callback' =&gt; 'node_unpublish_action',
  'parameters' =&gt; '',
  'description' =&gt; 'Unpublish post',
))
-&gt;values(array(
  'aid' =&gt; 'user_block_ip_action',
  'type' =&gt; 'user',
  'callback' =&gt; 'user_block_ip_action',
  'parameters' =&gt; '',
  'description' =&gt; 'Ban IP address of current user',
))
-&gt;values(array(
  'aid' =&gt; 'user_block_user_action',
  'type' =&gt; 'user',
  'callback' =&gt; 'user_block_user_action',
  'parameters' =&gt; '',
  'description' =&gt; 'Block current user',
))
-&gt;execute();

db_create_table('actions_aid', array(
  'fields' =&gt; array(
    'aid' =&gt; array(
      'type' =&gt; 'serial',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
  ),
  'primary key' =&gt; array(
    'aid',
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'actions_aid',
));

db_create_table('authmap', array(
  'fields' =&gt; array(
    'aid' =&gt; array(
      'type' =&gt; 'serial',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
    'uid' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'authname' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 128,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'module' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 128,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
  ),
  'unique keys' =&gt; array(
    'authname' =&gt; array(
      'authname',
    ),
  ),
  'primary key' =&gt; array(
    'aid',
  ),
  'module' =&gt; 'user',
  'name' =&gt; 'authmap',
));

db_create_table('batch', array(
  'fields' =&gt; array(
    'bid' =&gt; array(
      'type' =&gt; 'serial',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
    'token' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 64,
      'not null' =&gt; TRUE,
    ),
    'timestamp' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
    ),
    'batch' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
  ),
  'primary key' =&gt; array(
    'bid',
  ),
  'indexes' =&gt; array(
    'token' =&gt; array(
      'token',
    ),
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'batch',
));

db_create_table('blocks', array(
  'fields' =&gt; array(
    'bid' =&gt; array(
      'type' =&gt; 'serial',
      'not null' =&gt; TRUE,
    ),
    'module' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 64,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'delta' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 32,
      'not null' =&gt; TRUE,
      'default' =&gt; '0',
    ),
    'theme' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 64,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'status' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'weight' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'region' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 64,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'custom' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'throttle' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'visibility' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'pages' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
    ),
    'title' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 64,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'cache' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 1,
      'size' =&gt; 'tiny',
    ),
  ),
  'primary key' =&gt; array(
    'bid',
  ),
  'unique keys' =&gt; array(
    'tmd' =&gt; array(
      'theme',
      'module',
      'delta',
    ),
  ),
  'indexes' =&gt; array(
    'list' =&gt; array(
      'theme',
      'status',
      'region',
      'weight',
      'module',
    ),
  ),
  'module' =&gt; 'block',
  'name' =&gt; 'blocks',
));
db_insert('blocks')-&gt;fields(array(
  'bid',
  'module',
  'delta',
  'theme',
  'status',
  'weight',
  'region',
  'custom',
  'throttle',
  'visibility',
  'pages',
  'title',
  'cache',
))
-&gt;values(array(
  'bid' =&gt; '1',
  'module' =&gt; 'user',
  'delta' =&gt; '0',
  'theme' =&gt; 'garland',
  'status' =&gt; '1',
  'weight' =&gt; '0',
  'region' =&gt; 'left',
  'custom' =&gt; '0',
  'throttle' =&gt; '0',
  'visibility' =&gt; '0',
  'pages' =&gt; '',
  'title' =&gt; '',
  'cache' =&gt; '-1',
))
-&gt;values(array(
  'bid' =&gt; '2',
  'module' =&gt; 'user',
  'delta' =&gt; '1',
  'theme' =&gt; 'garland',
  'status' =&gt; '1',
  'weight' =&gt; '0',
  'region' =&gt; 'left',
  'custom' =&gt; '0',
  'throttle' =&gt; '0',
  'visibility' =&gt; '0',
  'pages' =&gt; '',
  'title' =&gt; '',
  'cache' =&gt; '-1',
))
-&gt;values(array(
  'bid' =&gt; '3',
  'module' =&gt; 'system',
  'delta' =&gt; '0',
  'theme' =&gt; 'garland',
  'status' =&gt; '1',
  'weight' =&gt; '10',
  'region' =&gt; 'footer',
  'custom' =&gt; '0',
  'throttle' =&gt; '0',
  'visibility' =&gt; '0',
  'pages' =&gt; '',
  'title' =&gt; '',
  'cache' =&gt; '-1',
))
-&gt;execute();

db_create_table('blocks_roles', array(
  'fields' =&gt; array(
    'module' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 64,
      'not null' =&gt; TRUE,
    ),
    'delta' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 32,
      'not null' =&gt; TRUE,
    ),
    'rid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
  ),
  'primary key' =&gt; array(
    'module',
    'delta',
    'rid',
  ),
  'indexes' =&gt; array(
    'rid' =&gt; array(
      'rid',
    ),
  ),
  'module' =&gt; 'block',
  'name' =&gt; 'blocks_roles',
));

db_create_table('boxes', array(
  'fields' =&gt; array(
    'bid' =&gt; array(
      'type' =&gt; 'serial',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
    'body' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
    'info' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 128,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'format' =&gt; array(
      'type' =&gt; 'int',
      'size' =&gt; 'small',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'unique keys' =&gt; array(
    'info' =&gt; array(
      'info',
    ),
  ),
  'primary key' =&gt; array(
    'bid',
  ),
  'module' =&gt; 'block',
  'name' =&gt; 'boxes',
));

db_create_table('cache', array(
  'fields' =&gt; array(
    'cid' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'data' =&gt; array(
      'type' =&gt; 'blob',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
    'expire' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'created' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'headers' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'serialized' =&gt; array(
      'type' =&gt; 'int',
      'size' =&gt; 'small',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'indexes' =&gt; array(
    'expire' =&gt; array(
      'expire',
    ),
  ),
  'primary key' =&gt; array(
    'cid',
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'cache',
));

db_create_table('cache_block', array(
  'fields' =&gt; array(
    'cid' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'data' =&gt; array(
      'type' =&gt; 'blob',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
    'expire' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'created' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'headers' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'serialized' =&gt; array(
      'type' =&gt; 'int',
      'size' =&gt; 'small',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'indexes' =&gt; array(
    'expire' =&gt; array(
      'expire',
    ),
  ),
  'primary key' =&gt; array(
    'cid',
  ),
  'module' =&gt; 'block',
  'name' =&gt; 'cache_block',
));

db_create_table('cache_filter', array(
  'fields' =&gt; array(
    'cid' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'data' =&gt; array(
      'type' =&gt; 'blob',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
    'expire' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'created' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'headers' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'serialized' =&gt; array(
      'type' =&gt; 'int',
      'size' =&gt; 'small',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'indexes' =&gt; array(
    'expire' =&gt; array(
      'expire',
    ),
  ),
  'primary key' =&gt; array(
    'cid',
  ),
  'module' =&gt; 'filter',
  'name' =&gt; 'cache_filter',
));

db_create_table('cache_form', array(
  'fields' =&gt; array(
    'cid' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'data' =&gt; array(
      'type' =&gt; 'blob',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
    'expire' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'created' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'headers' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'serialized' =&gt; array(
      'type' =&gt; 'int',
      'size' =&gt; 'small',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'indexes' =&gt; array(
    'expire' =&gt; array(
      'expire',
    ),
  ),
  'primary key' =&gt; array(
    'cid',
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'cache_form',
));

db_create_table('cache_menu', array(
  'fields' =&gt; array(
    'cid' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'data' =&gt; array(
      'type' =&gt; 'blob',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
    'expire' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'created' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'headers' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'serialized' =&gt; array(
      'type' =&gt; 'int',
      'size' =&gt; 'small',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'indexes' =&gt; array(
    'expire' =&gt; array(
      'expire',
    ),
  ),
  'primary key' =&gt; array(
    'cid',
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'cache_menu',
));

db_create_table('cache_page', array(
  'fields' =&gt; array(
    'cid' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'data' =&gt; array(
      'type' =&gt; 'blob',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
    'expire' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'created' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'headers' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'serialized' =&gt; array(
      'type' =&gt; 'int',
      'size' =&gt; 'small',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'indexes' =&gt; array(
    'expire' =&gt; array(
      'expire',
    ),
  ),
  'primary key' =&gt; array(
    'cid',
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'cache_page',
));

db_create_table('cache_update', array(
  'fields' =&gt; array(
    'cid' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'data' =&gt; array(
      'type' =&gt; 'blob',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
    'expire' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'created' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'headers' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'serialized' =&gt; array(
      'type' =&gt; 'int',
      'size' =&gt; 'small',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'indexes' =&gt; array(
    'expire' =&gt; array(
      'expire',
    ),
  ),
  'primary key' =&gt; array(
    'cid',
  ),
  'module' =&gt; 'update',
  'name' =&gt; 'cache_update',
));

db_create_table('files', array(
</codefragment>
  </duplication>
  <duplication lines="122" tokens="262">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="797"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="915"/>
    <codefragment>db_create_table('files', array(
  'fields' =&gt; array(
    'fid' =&gt; array(
      'type' =&gt; 'serial',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
    'uid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'filename' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'filepath' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'filemime' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'filesize' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'status' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'timestamp' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'indexes' =&gt; array(
    'uid' =&gt; array(
      'uid',
    ),
    'status' =&gt; array(
      'status',
    ),
    'timestamp' =&gt; array(
      'timestamp',
    ),
  ),
  'primary key' =&gt; array(
    'fid',
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'files',
));

db_create_table('filter_formats', array(
  'fields' =&gt; array(
    'format' =&gt; array(
      'type' =&gt; 'serial',
      'not null' =&gt; TRUE,
    ),
    'name' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'roles' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'cache' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
  ),
  'primary key' =&gt; array(
    'format',
  ),
  'unique keys' =&gt; array(
    'name' =&gt; array(
      'name',
    ),
  ),
  'module' =&gt; 'filter',
  'name' =&gt; 'filter_formats',
));
db_insert('filter_formats')-&gt;fields(array(
  'format',
  'name',
  'roles',
  'cache',
))
-&gt;values(array(
  'format' =&gt; '1',
  'name' =&gt; 'Filtered HTML',
  'roles' =&gt; ',1,2,',
  'cache' =&gt; '1',
))
-&gt;values(array(
  'format' =&gt; '2',
  'name' =&gt; 'Full HTML',
  'roles' =&gt; '',
  'cache' =&gt; '1',
))
-&gt;execute();
</codefragment>
  </duplication>
  <duplication lines="184" tokens="384">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="915"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="1039"/>
    <codefragment>  'roles' =&gt; '',
  'cache' =&gt; '1',
))
-&gt;execute();

db_create_table('filters', array(
  'fields' =&gt; array(
    'fid' =&gt; array(
      'type' =&gt; 'serial',
      'not null' =&gt; TRUE,
    ),
    'format' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'module' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 64,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'delta' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'weight' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
  ),
  'primary key' =&gt; array(
    'fid',
  ),
  'unique keys' =&gt; array(
    'fmd' =&gt; array(
      'format',
      'module',
      'delta',
    ),
  ),
  'indexes' =&gt; array(
    'list' =&gt; array(
      'format',
      'weight',
      'module',
      'delta',
    ),
  ),
  'module' =&gt; 'filter',
  'name' =&gt; 'filters',
));
db_insert('filters')-&gt;fields(array(
  'fid',
  'format',
  'module',
  'delta',
  'weight',
))
-&gt;values(array(
  'fid' =&gt; '1',
  'format' =&gt; '1',
  'module' =&gt; 'filter',
  'delta' =&gt; '2',
  'weight' =&gt; '0',
))
-&gt;values(array(
  'fid' =&gt; '2',
  'format' =&gt; '1',
  'module' =&gt; 'filter',
  'delta' =&gt; '0',
  'weight' =&gt; '1',
))
-&gt;values(array(
  'fid' =&gt; '3',
  'format' =&gt; '1',
  'module' =&gt; 'filter',
  'delta' =&gt; '1',
  'weight' =&gt; '2',
))
-&gt;values(array(
  'fid' =&gt; '4',
  'format' =&gt; '1',
  'module' =&gt; 'filter',
  'delta' =&gt; '3',
  'weight' =&gt; '10',
))
-&gt;values(array(
  'fid' =&gt; '5',
  'format' =&gt; '2',
  'module' =&gt; 'filter',
  'delta' =&gt; '2',
  'weight' =&gt; '0',
))
-&gt;values(array(
  'fid' =&gt; '6',
  'format' =&gt; '2',
  'module' =&gt; 'filter',
  'delta' =&gt; '1',
  'weight' =&gt; '1',
))
-&gt;values(array(
  'fid' =&gt; '7',
  'format' =&gt; '2',
  'module' =&gt; 'filter',
  'delta' =&gt; '3',
  'weight' =&gt; '10',
))
-&gt;execute();

db_create_table('flood', array(
  'fields' =&gt; array(
    'fid' =&gt; array(
      'type' =&gt; 'serial',
      'not null' =&gt; TRUE,
    ),
    'event' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 64,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'hostname' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 128,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'timestamp' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'primary key' =&gt; array(
    'fid',
  ),
  'indexes' =&gt; array(
    'allow' =&gt; array(
      'event',
      'hostname',
      'timestamp',
    ),
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'flood',
));

db_create_table('history', array(
  'fields' =&gt; array(
    'uid' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'nid' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'timestamp' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'primary key' =&gt; array(
    'uid',
    'nid',
  ),
  'indexes' =&gt; array(
    'nid' =&gt; array(
      'nid',
    ),
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'history',
));

db_create_table('menu_links', array(
</codefragment>
  </duplication>
  <duplication lines="517" tokens="1317">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="1098"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="1269"/>
    <codefragment>db_create_table('menu_links', array(
  'fields' =&gt; array(
    'menu_name' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 32,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'mlid' =&gt; array(
      'type' =&gt; 'serial',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
    'plid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'link_path' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'router_path' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'link_title' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'options' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'module' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; 'system',
    ),
    'hidden' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'small',
    ),
    'external' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'small',
    ),
    'has_children' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'small',
    ),
    'expanded' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'small',
    ),
    'weight' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'depth' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'small',
    ),
    'customized' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'small',
    ),
    'p1' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'p2' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'p3' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'p4' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'p5' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'p6' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'p7' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'p8' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'p9' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'updated' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'small',
    ),
  ),
  'indexes' =&gt; array(
    'path_menu' =&gt; array(
      array(
        'link_path',
      128,
      ),
      'menu_name',
    ),
    'menu_plid_expand_child' =&gt; array(
      'menu_name',
      'plid',
      'expanded',
      'has_children',
    ),
    'menu_parents' =&gt; array(
      'menu_name',
      'p1',
      'p2',
      'p3',
      'p4',
      'p5',
      'p6',
      'p7',
      'p8',
      'p9',
    ),
    'router_path' =&gt; array(
      array(
        'router_path',
      128,
      ),
    ),
  ),
  'primary key' =&gt; array(
    'mlid',
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'menu_links',
));
db_insert('menu_links')-&gt;fields(array(
  'menu_name',
  'mlid',
  'plid',
  'link_path',
  'router_path',
  'link_title',
  'options',
  'module',
  'hidden',
  'external',
  'has_children',
  'expanded',
  'weight',
  'depth',
  'customized',
  'p1',
  'p2',
  'p3',
  'p4',
  'p5',
  'p6',
  'p7',
  'p8',
  'p9',
  'updated',
))
-&gt;values(array(
  'menu_name' =&gt; 'navigation',
  'mlid' =&gt; '1',
  'plid' =&gt; '0',
  'link_path' =&gt; 'batch',
  'router_path' =&gt; 'batch',
  'link_title' =&gt; '',
  'options' =&gt; 'a:0:{}',
  'module' =&gt; 'system',
  'hidden' =&gt; '-1',
  'external' =&gt; '0',
  'has_children' =&gt; '0',
  'expanded' =&gt; '0',
  'weight' =&gt; '0',
  'depth' =&gt; '1',
  'customized' =&gt; '0',
  'p1' =&gt; '1',
  'p2' =&gt; '0',
  'p3' =&gt; '0',
  'p4' =&gt; '0',
  'p5' =&gt; '0',
  'p6' =&gt; '0',
  'p7' =&gt; '0',
  'p8' =&gt; '0',
  'p9' =&gt; '0',
  'updated' =&gt; '0',
))
-&gt;values(array(
  'menu_name' =&gt; 'navigation',
  'mlid' =&gt; '2',
  'plid' =&gt; '0',
  'link_path' =&gt; 'admin',
  'router_path' =&gt; 'admin',
  'link_title' =&gt; 'Administer',
  'options' =&gt; 'a:0:{}',
  'module' =&gt; 'system',
  'hidden' =&gt; '0',
  'external' =&gt; '0',
  'has_children' =&gt; '1',
  'expanded' =&gt; '0',
  'weight' =&gt; '9',
  'depth' =&gt; '1',
  'customized' =&gt; '0',
  'p1' =&gt; '2',
  'p2' =&gt; '0',
  'p3' =&gt; '0',
  'p4' =&gt; '0',
  'p5' =&gt; '0',
  'p6' =&gt; '0',
  'p7' =&gt; '0',
  'p8' =&gt; '0',
  'p9' =&gt; '0',
  'updated' =&gt; '0',
))
-&gt;values(array(
  'menu_name' =&gt; 'navigation',
  'mlid' =&gt; '3',
  'plid' =&gt; '0',
  'link_path' =&gt; 'node',
  'router_path' =&gt; 'node',
  'link_title' =&gt; 'Content',
  'options' =&gt; 'a:0:{}',
  'module' =&gt; 'system',
  'hidden' =&gt; '-1',
  'external' =&gt; '0',
  'has_children' =&gt; '0',
  'expanded' =&gt; '0',
  'weight' =&gt; '0',
  'depth' =&gt; '1',
  'customized' =&gt; '0',
  'p1' =&gt; '3',
  'p2' =&gt; '0',
  'p3' =&gt; '0',
  'p4' =&gt; '0',
  'p5' =&gt; '0',
  'p6' =&gt; '0',
  'p7' =&gt; '0',
  'p8' =&gt; '0',
  'p9' =&gt; '0',
  'updated' =&gt; '0',
))
-&gt;values(array(
  'menu_name' =&gt; 'navigation',
  'mlid' =&gt; '4',
  'plid' =&gt; '0',
  'link_path' =&gt; 'logout',
  'router_path' =&gt; 'logout',
  'link_title' =&gt; 'Log out',
  'options' =&gt; 'a:0:{}',
  'module' =&gt; 'system',
  'hidden' =&gt; '0',
  'external' =&gt; '0',
  'has_children' =&gt; '0',
  'expanded' =&gt; '0',
  'weight' =&gt; '10',
  'depth' =&gt; '1',
  'customized' =&gt; '0',
  'p1' =&gt; '4',
  'p2' =&gt; '0',
  'p3' =&gt; '0',
  'p4' =&gt; '0',
  'p5' =&gt; '0',
  'p6' =&gt; '0',
  'p7' =&gt; '0',
  'p8' =&gt; '0',
  'p9' =&gt; '0',
  'updated' =&gt; '0',
))
-&gt;values(array(
  'menu_name' =&gt; 'navigation',
  'mlid' =&gt; '5',
  'plid' =&gt; '0',
  'link_path' =&gt; 'rss.xml',
  'router_path' =&gt; 'rss.xml',
  'link_title' =&gt; 'RSS feed',
  'options' =&gt; 'a:0:{}',
  'module' =&gt; 'system',
  'hidden' =&gt; '-1',
  'external' =&gt; '0',
  'has_children' =&gt; '0',
  'expanded' =&gt; '0',
  'weight' =&gt; '0',
  'depth' =&gt; '1',
  'customized' =&gt; '0',
  'p1' =&gt; '5',
  'p2' =&gt; '0',
  'p3' =&gt; '0',
  'p4' =&gt; '0',
  'p5' =&gt; '0',
  'p6' =&gt; '0',
  'p7' =&gt; '0',
  'p8' =&gt; '0',
  'p9' =&gt; '0',
  'updated' =&gt; '0',
))
-&gt;values(array(
  'menu_name' =&gt; 'navigation',
  'mlid' =&gt; '6',
  'plid' =&gt; '0',
  'link_path' =&gt; 'user',
  'router_path' =&gt; 'user',
  'link_title' =&gt; 'User account',
  'options' =&gt; 'a:0:{}',
  'module' =&gt; 'system',
  'hidden' =&gt; '-1',
  'external' =&gt; '0',
  'has_children' =&gt; '0',
  'expanded' =&gt; '0',
  'weight' =&gt; '0',
  'depth' =&gt; '1',
  'customized' =&gt; '0',
  'p1' =&gt; '6',
  'p2' =&gt; '0',
  'p3' =&gt; '0',
  'p4' =&gt; '0',
  'p5' =&gt; '0',
  'p6' =&gt; '0',
  'p7' =&gt; '0',
  'p8' =&gt; '0',
  'p9' =&gt; '0',
  'updated' =&gt; '0',
))
-&gt;values(array(
  'menu_name' =&gt; 'navigation',
  'mlid' =&gt; '7',
  'plid' =&gt; '0',
  'link_path' =&gt; 'node/%',
  'router_path' =&gt; 'node/%',
  'link_title' =&gt; '',
  'options' =&gt; 'a:0:{}',
  'module' =&gt; 'system',
  'hidden' =&gt; '-1',
  'external' =&gt; '0',
  'has_children' =&gt; '0',
  'expanded' =&gt; '0',
  'weight' =&gt; '0',
  'depth' =&gt; '1',
  'customized' =&gt; '0',
  'p1' =&gt; '7',
  'p2' =&gt; '0',
  'p3' =&gt; '0',
  'p4' =&gt; '0',
  'p5' =&gt; '0',
  'p6' =&gt; '0',
  'p7' =&gt; '0',
  'p8' =&gt; '0',
  'p9' =&gt; '0',
  'updated' =&gt; '0',
))
-&gt;values(array(
  'menu_name' =&gt; 'navigation',
  'mlid' =&gt; '8',
  'plid' =&gt; '2',
  'link_path' =&gt; 'admin/compact',
  'router_path' =&gt; 'admin/compact',
  'link_title' =&gt; 'Compact mode',
  'options' =&gt; 'a:0:{}',
  'module' =&gt; 'system',
  'hidden' =&gt; '-1',
  'external' =&gt; '0',
  'has_children' =&gt; '0',
  'expanded' =&gt; '0',
  'weight' =&gt; '0',
  'depth' =&gt; '2',
  'customized' =&gt; '0',
  'p1' =&gt; '2',
  'p2' =&gt; '8',
  'p3' =&gt; '0',
  'p4' =&gt; '0',
  'p5' =&gt; '0',
  'p6' =&gt; '0',
  'p7' =&gt; '0',
  'p8' =&gt; '0',
  'p9' =&gt; '0',
  'updated' =&gt; '0',
))
-&gt;values(array(
  'menu_name' =&gt; 'navigation',
  'mlid' =&gt; '9',
  'plid' =&gt; '0',
  'link_path' =&gt; 'filter/tips',
  'router_path' =&gt; 'filter/tips',
  'link_title' =&gt; 'Compose tips',
  'options' =&gt; 'a:0:{}',
  'module' =&gt; 'system',
  'hidden' =&gt; '1',
  'external' =&gt; '0',
  'has_children' =&gt; '0',
  'expanded' =&gt; '0',
  'weight' =&gt; '0',
  'depth' =&gt; '1',
  'customized' =&gt; '0',
  'p1' =&gt; '9',
  'p2' =&gt; '0',
  'p3' =&gt; '0',
  'p4' =&gt; '0',
  'p5' =&gt; '0',
  'p6' =&gt; '0',
  'p7' =&gt; '0',
  'p8' =&gt; '0',
  'p9' =&gt; '0',
  'updated' =&gt; '0',
))
-&gt;values(array(
  'menu_name' =&gt; 'navigation',
  'mlid' =&gt; '10',
  'plid' =&gt; '2',
  'link_path' =&gt; 'admin/content',
  'router_path' =&gt; 'admin/content',
  'link_title' =&gt; 'Content management',
  'options' =&gt; "a:1:{s:10:\"attributes\";a:1:{s:5:\"title\";s:27:\"Manage your site's content.\";}}",
  'module' =&gt; 'system',
  'hidden' =&gt; '0',
  'external' =&gt; '0',
  'has_children' =&gt; '1',
  'expanded' =&gt; '0',
  'weight' =&gt; '-10',
  'depth' =&gt; '2',
  'customized' =&gt; '0',
  'p1' =&gt; '2',
  'p2' =&gt; '10',
  'p3' =&gt; '0',
  'p4' =&gt; '0',
  'p5' =&gt; '0',
  'p6' =&gt; '0',
  'p7' =&gt; '0',
  'p8' =&gt; '0',
  'p9' =&gt; '0',
  'updated' =&gt; '0',
))
-&gt;values(array(
  'menu_name' =&gt; 'navigation',
  'mlid' =&gt; '11',
  'plid' =&gt; '0',
  'link_path' =&gt; 'node/add',
  'router_path' =&gt; 'node/add',
  'link_title' =&gt; 'Create content',
  'options' =&gt; 'a:0:{}',
  'module' =&gt; 'system',
  'hidden' =&gt; '0',
  'external' =&gt; '0',
  'has_children' =&gt; '1',
  'expanded' =&gt; '0',
  'weight' =&gt; '1',
  'depth' =&gt; '1',
  'customized' =&gt; '0',
  'p1' =&gt; '11',
  'p2' =&gt; '0',
  'p3' =&gt; '0',
  'p4' =&gt; '0',
  'p5' =&gt; '0',
  'p6' =&gt; '0',
  'p7' =&gt; '0',
  'p8' =&gt; '0',
  'p9' =&gt; '0',
  'updated' =&gt; '0',
))
-&gt;values(array(
  'menu_name' =&gt; 'navigation',
  'mlid' =&gt; '12',
  'plid' =&gt; '0',
  'link_path' =&gt; 'system/files',
</codefragment>
  </duplication>
  <duplication lines="322" tokens="796">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="3492"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="4797"/>
    <codefragment>  'p4' =&gt; '0',
  'p5' =&gt; '0',
  'p6' =&gt; '0',
  'p7' =&gt; '0',
  'p8' =&gt; '0',
  'p9' =&gt; '0',
  'updated' =&gt; '0',
))
-&gt;execute();

db_create_table('menu_router', array(
  'fields' =&gt; array(
    'path' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'load_functions' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
    ),
    'to_arg_functions' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
    ),
    'access_callback' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'access_arguments' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'page_callback' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'page_arguments' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'fit' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'number_parts' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'small',
    ),
    'tab_parent' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'tab_root' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'title' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'title_callback' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'title_arguments' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'type' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'block_callback' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'description' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
    ),
    'position' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'weight' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'file' =&gt; array(
      'type' =&gt; 'text',
      'size' =&gt; 'medium',
    ),
  ),
  'indexes' =&gt; array(
    'fit' =&gt; array(
      'fit',
    ),
    'tab_parent' =&gt; array(
      'tab_parent',
    ),
    'tab_root_weight_title' =&gt; array(
      array(
        'tab_root',
      64,
      ),
      'weight',
      'title',
    ),
  ),
  'primary key' =&gt; array(
    'path',
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'menu_router',
));
db_insert('menu_router')-&gt;fields(array(
  'path',
  'load_functions',
  'to_arg_functions',
  'access_callback',
  'access_arguments',
  'page_callback',
  'page_arguments',
  'fit',
  'number_parts',
  'tab_parent',
  'tab_root',
  'title',
  'title_callback',
  'title_arguments',
  'type',
  'block_callback',
  'description',
  'position',
  'weight',
  'file',
))
-&gt;values(array(
  'path' =&gt; 'admin',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:27:"access administration pages";}',
  'page_callback' =&gt; 'system_main_admin_page',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '1',
  'number_parts' =&gt; '1',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin',
  'title' =&gt; 'Administer',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '9',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:27:"access administration pages";}',
  'page_callback' =&gt; 'system_admin_menu_block_page',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/build',
  'title' =&gt; 'Site building',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Control how your site looks and feels.',
  'position' =&gt; 'right',
  'weight' =&gt; '-10',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/block',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:17:"administer blocks";}',
  'page_callback' =&gt; 'block_admin_display',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/build/block',
  'title' =&gt; 'Blocks',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; "Configure what block content appears in your site's sidebars and other regions.",
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/block/block.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/block/add',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:17:"administer blocks";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:20:"block_add_block_form";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/build/block',
  'tab_root' =&gt; 'admin/build/block',
  'title' =&gt; 'Add block',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/block/block.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/block/configure',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:17:"administer blocks";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:21:"block_admin_configure";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/build/block/configure',
  'title' =&gt; 'Configure block',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/block/block.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/block/delete',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:17:"administer blocks";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:16:"block_box_delete";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/build/block/delete',
  'title' =&gt; 'Delete block',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/block/block.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/block/list',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:17:"administer blocks";}',
  'page_callback' =&gt; 'block_admin_display',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/build/block',
  'tab_root' =&gt; 'admin/build/block',
  'title' =&gt; 'List',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '-10',
  'file' =&gt; 'modules/block/block.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/block/list/bluemarine',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '_block_themes_access',
  'access_arguments' =&gt; 'a:1:{i:0;O:8:"stdClass":12:{s:8:"filename";s:33:"themes/bluemarine/bluemarine.info";s:4:"name";s:10:"bluemarine";s:4:"type";s:5:"theme";s:5:"owner";s:45:"themes/engines/phptemplate/phptemplate.engine";s:6:"status";s:1:"0";s:8:"throttle";s:1:"0";s:9:"bootstrap";s:1:"0";s:14:"schema_version";s:2:"-1";s:6:"weight";s:1:"0";s:4:"info";a:13:{s:4:"name";s:10:"Bluemarine";s:11:"description";s:66:"Table-based multi-column theme with a marine and ash color scheme.";s:7:"version";s:4:"6.17";s:4:"core";s:3:"6.x";s:6:"engine";s:11:"phptemplate";s:7:"project";s:6:"drupal";s:9:"datestamp";s:10:"1275505216";s:7:"regions";a:5:{s:4:"left";s:12:"Left sidebar";s:5:"right";s:13:"Right sidebar";s:7:"content";s:7:"Content";s:6:"header";s:6:"Header";s:6:"footer";s:6:"Footer";}s:8:"features";a:10:{i:0;s:20:"comment_user_picture";i:1;s:7:"favicon";i:2;s:7:"mission";i:3;s:4:"logo";i:4;s:4:"name";i:5;s:17:"node_user_picture";i:6;s:6:"search";i:7;s:6:"slogan";i:8;s:13:"primary_links";i:9;s:15:"secondary_links";}s:11:"stylesheets";a:1:{s:3:"all";a:1:{s:9:"style.css";s:27:"themes/bluemarine/style.css";}}s:7:"scripts";a:1:{s:9:"script.js";s:27:"themes/bluemarine/script.js";}s:10:"screenshot";s:32:"themes/bluemarine/screenshot.png";s:3:"php";s:5:"4.3.5";}s:11:"stylesheets";a:1:{s:3:"all";a:1:{s:9:"style.css";s:27:"themes/bluemarine/style.css";}}s:6:"engine";s:11:"phptemplate";}}',
</codefragment>
  </duplication>
  <duplication lines="44" tokens="125">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="3858"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="5163"/>
    <codefragment>  'page_callback' =&gt; 'block_admin_display',
  'page_arguments' =&gt; 'a:1:{i:0;s:7:"garland";}',
  'fit' =&gt; '31',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; 'admin/build/block/list',
  'tab_root' =&gt; 'admin/build/block',
  'title' =&gt; 'Garland',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '-10',
  'file' =&gt; 'modules/block/block.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/block/list/js',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:17:"administer blocks";}',
  'page_callback' =&gt; 'block_admin_display_js',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '31',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/build/block/list/js',
  'title' =&gt; 'JavaScript List Form',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/block/block.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/block/list/marvin',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '_block_themes_access',
  'access_arguments' =&gt; 'a:1:{i:0;O:8:"stdClass":12:{s:8:"filename";s:35:"themes/chameleon/marvin/marvin.info";s:4:"name";s:6:"marvin";s:4:"type";s:5:"theme";s:5:"owner";s:0:"";s:6:"status";s:1:"0";s:8:"throttle";s:1:"0";s:9:"bootstrap";s:1:"0";s:14:"schema_version";s:2:"-1";s:6:"weight";s:1:"0";s:4:"info";a:13:{s:4:"name";s:6:"Marvin";s:11:"description";s:31:"Boxy tabled theme in all grays.";s:7:"regions";a:2:{s:4:"left";s:12:"Left sidebar";s:5:"right";s:13:"Right sidebar";}s:7:"version";s:4:"6.17";s:4:"core";s:3:"6.x";s:10:"base theme";s:9:"chameleon";s:7:"project";s:6:"drupal";s:9:"datestamp";s:10:"1275505216";s:8:"features";a:10:{i:0;s:20:"comment_user_picture";i:1;s:7:"favicon";i:2;s:7:"mission";i:3;s:4:"logo";i:4;s:4:"name";i:5;s:17:"node_user_picture";i:6;s:6:"search";i:7;s:6:"slogan";i:8;s:13:"primary_links";i:9;s:15:"secondary_links";}s:11:"stylesheets";a:1:{s:3:"all";a:1:{s:9:"style.css";s:33:"themes/chameleon/marvin/style.css";}}s:7:"scripts";a:1:{s:9:"script.js";s:33:"themes/chameleon/marvin/script.js";}s:10:"screenshot";s:38:"themes/chameleon/marvin/screenshot.png";s:3:"php";s:5:"4.3.5";}s:11:"stylesheets";a:1:{s:3:"all";a:1:{s:9:"style.css";s:33:"themes/chameleon/marvin/style.css";}}s:10:"base_theme";s:9:"chameleon";}}',
</codefragment>
  </duplication>
  <duplication lines="112" tokens="320">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="3962"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="5531"/>
    <codefragment>-&gt;values(array(
  'path' =&gt; 'admin/build/modules',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:14:"system_modules";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/build/modules',
  'title' =&gt; 'Modules',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Enable or disable add-on modules for your site.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/modules/list',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:14:"system_modules";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/build/modules',
  'tab_root' =&gt; 'admin/build/modules',
  'title' =&gt; 'List',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/modules/list/confirm',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:14:"system_modules";}',
  'fit' =&gt; '31',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/build/modules/list/confirm',
  'title' =&gt; 'List',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/modules/uninstall',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:24:"system_modules_uninstall";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/build/modules',
  'tab_root' =&gt; 'admin/build/modules',
  'title' =&gt; 'Uninstall',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/modules/uninstall/confirm',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:24:"system_modules_uninstall";}',
  'fit' =&gt; '31',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/build/modules/uninstall/confirm',
  'title' =&gt; 'Uninstall',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/themes',
</codefragment>
  </duplication>
  <duplication lines="72" tokens="206">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="4072"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="5751"/>
    <codefragment>-&gt;values(array(
  'path' =&gt; 'admin/build/themes',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:2:{i:0;s:18:"system_themes_form";i:1;N;}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/build/themes',
  'title' =&gt; 'Themes',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Change which theme your site uses or allows users to set.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/themes/select',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:2:{i:0;s:18:"system_themes_form";i:1;N;}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/build/themes',
  'tab_root' =&gt; 'admin/build/themes',
  'title' =&gt; 'List',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; 'Select the default theme.',
  'position' =&gt; '',
  'weight' =&gt; '-1',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/themes/settings',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:21:"system_theme_settings";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/build/themes',
  'tab_root' =&gt; 'admin/build/themes',
  'title' =&gt; 'Configure',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/themes/settings/bluemarine',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '_system_themes_access',
  'access_arguments' =&gt; 'a:1:{i:0;O:8:"stdClass":12:{s:8:"filename";s:33:"themes/bluemarine/bluemarine.info";s:4:"name";s:10:"bluemarine";s:4:"type";s:5:"theme";s:5:"owner";s:45:"themes/engines/phptemplate/phptemplate.engine";s:6:"status";s:1:"0";s:8:"throttle";s:1:"0";s:9:"bootstrap";s:1:"0";s:14:"schema_version";s:2:"-1";s:6:"weight";s:1:"0";s:4:"info";a:13:{s:4:"name";s:10:"Bluemarine";s:11:"description";s:66:"Table-based multi-column theme with a marine and ash color scheme.";s:7:"version";s:4:"6.17";s:4:"core";s:3:"6.x";s:6:"engine";s:11:"phptemplate";s:7:"project";s:6:"drupal";s:9:"datestamp";s:10:"1275505216";s:7:"regions";a:5:{s:4:"left";s:12:"Left sidebar";s:5:"right";s:13:"Right sidebar";s:7:"content";s:7:"Content";s:6:"header";s:6:"Header";s:6:"footer";s:6:"Footer";}s:8:"features";a:10:{i:0;s:20:"comment_user_picture";i:1;s:7:"favicon";i:2;s:7:"mission";i:3;s:4:"logo";i:4;s:4:"name";i:5;s:17:"node_user_picture";i:6;s:6:"search";i:7;s:6:"slogan";i:8;s:13:"primary_links";i:9;s:15:"secondary_links";}s:11:"stylesheets";a:1:{s:3:"all";a:1:{s:9:"style.css";s:27:"themes/bluemarine/style.css";}}s:7:"scripts";a:1:{s:9:"script.js";s:27:"themes/bluemarine/script.js";}s:10:"screenshot";s:32:"themes/bluemarine/screenshot.png";s:3:"php";s:5:"4.3.5";}s:11:"stylesheets";a:1:{s:3:"all";a:1:{s:9:"style.css";s:27:"themes/bluemarine/style.css";}}s:6:"engine";s:11:"phptemplate";}}',
</codefragment>
  </duplication>
  <duplication lines="44" tokens="125">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="4188"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="5867"/>
    <codefragment>  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:2:{i:0;s:21:"system_theme_settings";i:1;s:7:"garland";}',
  'fit' =&gt; '31',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; 'admin/build/themes/settings',
  'tab_root' =&gt; 'admin/build/themes',
  'title' =&gt; 'Garland',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/themes/settings/global',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:21:"system_theme_settings";}',
  'fit' =&gt; '31',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; 'admin/build/themes/settings',
  'tab_root' =&gt; 'admin/build/themes',
  'title' =&gt; 'Global settings',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '-1',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/build/themes/settings/marvin',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '_system_themes_access',
  'access_arguments' =&gt; 'a:1:{i:0;O:8:"stdClass":12:{s:8:"filename";s:35:"themes/chameleon/marvin/marvin.info";s:4:"name";s:6:"marvin";s:4:"type";s:5:"theme";s:5:"owner";s:0:"";s:6:"status";s:1:"0";s:8:"throttle";s:1:"0";s:9:"bootstrap";s:1:"0";s:14:"schema_version";s:2:"-1";s:6:"weight";s:1:"0";s:4:"info";a:13:{s:4:"name";s:6:"Marvin";s:11:"description";s:31:"Boxy tabled theme in all grays.";s:7:"regions";a:2:{s:4:"left";s:12:"Left sidebar";s:5:"right";s:13:"Right sidebar";}s:7:"version";s:4:"6.17";s:4:"core";s:3:"6.x";s:10:"base theme";s:9:"chameleon";s:7:"project";s:6:"drupal";s:9:"datestamp";s:10:"1275505216";s:8:"features";a:10:{i:0;s:20:"comment_user_picture";i:1;s:7:"favicon";i:2;s:7:"mission";i:3;s:4:"logo";i:4;s:4:"name";i:5;s:17:"node_user_picture";i:6;s:6:"search";i:7;s:6:"slogan";i:8;s:13:"primary_links";i:9;s:15:"secondary_links";}s:11:"stylesheets";a:1:{s:3:"all";a:1:{s:9:"style.css";s:33:"themes/chameleon/marvin/style.css";}}s:7:"scripts";a:1:{s:9:"script.js";s:33:"themes/chameleon/marvin/script.js";}s:10:"screenshot";s:38:"themes/chameleon/marvin/screenshot.png";s:3:"php";s:5:"4.3.5";}s:11:"stylesheets";a:1:{s:3:"all";a:1:{s:9:"style.css";s:33:"themes/chameleon/marvin/style.css";}}s:10:"base_theme";s:9:"chameleon";}}',
</codefragment>
  </duplication>
  <duplication lines="106" tokens="302">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="4276"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="5955"/>
    <codefragment>  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:2:{i:0;s:21:"system_theme_settings";i:1;s:10:"pushbutton";}',
  'fit' =&gt; '31',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; 'admin/build/themes/settings',
  'tab_root' =&gt; 'admin/build/themes',
  'title' =&gt; 'Pushbutton',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/by-module',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:27:"access administration pages";}',
  'page_callback' =&gt; 'system_admin_by_module',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; 'admin',
  'tab_root' =&gt; 'admin',
  'title' =&gt; 'By module',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '2',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/by-task',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:27:"access administration pages";}',
  'page_callback' =&gt; 'system_main_admin_page',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; 'admin',
  'tab_root' =&gt; 'admin',
  'title' =&gt; 'By task',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/compact',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:27:"access administration pages";}',
  'page_callback' =&gt; 'system_admin_compact_page',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/compact',
  'title' =&gt; 'Compact mode',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:27:"access administration pages";}',
  'page_callback' =&gt; 'system_admin_menu_block_page',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/content',
  'title' =&gt; 'Content management',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; "Manage your site's content.",
  'position' =&gt; 'left',
  'weight' =&gt; '-10',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/node',
</codefragment>
  </duplication>
  <duplication lines="134" tokens="383">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="4380"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="6125"/>
    <codefragment>-&gt;values(array(
  'path' =&gt; 'admin/content/node',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:16:"administer nodes";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:18:"node_admin_content";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/content/node',
  'title' =&gt; 'Content',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; "View, edit, and delete your site's content.",
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/node.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/node-settings',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:16:"administer nodes";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:14:"node_configure";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/content/node-settings',
  'title' =&gt; 'Post settings',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Control posting behavior, such as teaser length, requiring previews before posting, and the number of posts on the front page.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/node.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/node-settings/rebuild',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:27:"access administration pages";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:30:"node_configure_rebuild_confirm";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/content/node-settings/rebuild',
  'title' =&gt; 'Rebuild permissions',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/node.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/node-type/page',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:24:"administer content types";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; "a:2:{i:0;s:14:\"node_type_form\";i:1;O:8:\"stdClass\":14:{s:4:\"type\";s:4:\"page\";s:4:\"name\";s:4:\"Page\";s:6:\"module\";s:4:\"node\";s:11:\"description\";s:296:\"A &lt;em&gt;page&lt;/em&gt;, similar in form to a &lt;em&gt;story&lt;/em&gt;, is a simple method for creating and displaying information that rarely changes, such as an \"About us\" section of a website. By default, a &lt;em&gt;page&lt;/em&gt; entry does not allow visitor comments and is not featured on the site's initial home page.\";s:4:\"help\";s:0:\"\";s:9:\"has_title\";s:1:\"1\";s:11:\"title_label\";s:5:\"Title\";s:8:\"has_body\";s:1:\"1\";s:10:\"body_label\";s:4:\"Body\";s:14:\"min_word_count\";s:1:\"0\";s:6:\"custom\";s:1:\"1\";s:8:\"modified\";s:1:\"1\";s:6:\"locked\";s:1:\"0\";s:9:\"orig_type\";s:4:\"page\";}}",
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/content/node-type/page',
  'title' =&gt; 'Page',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/content_types.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/node-type/page/delete',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:24:"administer content types";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; "a:2:{i:0;s:24:\"node_type_delete_confirm\";i:1;O:8:\"stdClass\":14:{s:4:\"type\";s:4:\"page\";s:4:\"name\";s:4:\"Page\";s:6:\"module\";s:4:\"node\";s:11:\"description\";s:296:\"A &lt;em&gt;page&lt;/em&gt;, similar in form to a &lt;em&gt;story&lt;/em&gt;, is a simple method for creating and displaying information that rarely changes, such as an \"About us\" section of a website. By default, a &lt;em&gt;page&lt;/em&gt; entry does not allow visitor comments and is not featured on the site's initial home page.\";s:4:\"help\";s:0:\"\";s:9:\"has_title\";s:1:\"1\";s:11:\"title_label\";s:5:\"Title\";s:8:\"has_body\";s:1:\"1\";s:10:\"body_label\";s:4:\"Body\";s:14:\"min_word_count\";s:1:\"0\";s:6:\"custom\";s:1:\"1\";s:8:\"modified\";s:1:\"1\";s:6:\"locked\";s:1:\"0\";s:9:\"orig_type\";s:4:\"page\";}}",
  'fit' =&gt; '31',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/content/node-type/page/delete',
  'title' =&gt; 'Delete',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/content_types.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/node-type/page/edit',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:24:"administer content types";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; "a:2:{i:0;s:14:\"node_type_form\";i:1;O:8:\"stdClass\":14:{s:4:\"type\";s:4:\"page\";s:4:\"name\";s:4:\"Page\";s:6:\"module\";s:4:\"node\";s:11:\"description\";s:296:\"A &lt;em&gt;page&lt;/em&gt;, similar in form to a &lt;em&gt;story&lt;/em&gt;, is a simple method for creating and displaying information that rarely changes, such as an \"About us\" section of a website. By default, a &lt;em&gt;page&lt;/em&gt; entry does not allow visitor comments and is not featured on the site's initial home page.\";s:4:\"help\";s:0:\"\";s:9:\"has_title\";s:1:\"1\";s:11:\"title_label\";s:5:\"Title\";s:8:\"has_body\";s:1:\"1\";s:10:\"body_label\";s:4:\"Body\";s:14:\"min_word_count\";s:1:\"0\";s:6:\"custom\";s:1:\"1\";s:8:\"modified\";s:1:\"1\";s:6:\"locked\";s:1:\"0\";s:9:\"orig_type\";s:4:\"page\";}}",
  'fit' =&gt; '31',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; 'admin/content/node-type/page',
  'tab_root' =&gt; 'admin/content/node-type/page',
  'title' =&gt; 'Edit',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/content_types.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/node-type/story',
</codefragment>
  </duplication>
  <duplication lines="122" tokens="347">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="4502"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="6313"/>
    <codefragment>  'title' =&gt; 'Edit',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/content_types.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/node-type/story',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:24:"administer content types";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; "a:2:{i:0;s:14:\"node_type_form\";i:1;O:8:\"stdClass\":14:{s:4:\"type\";s:5:\"story\";s:4:\"name\";s:5:\"Story\";s:6:\"module\";s:4:\"node\";s:11:\"description\";s:392:\"A &lt;em&gt;story&lt;/em&gt;, similar in form to a &lt;em&gt;page&lt;/em&gt;, is ideal for creating and displaying content that informs or engages website visitors. Press releases, site announcements, and informal blog-like entries may all be created with a &lt;em&gt;story&lt;/em&gt; entry. By default, a &lt;em&gt;story&lt;/em&gt; entry is automatically featured on the site's initial home page, and provides the ability to post comments.\";s:4:\"help\";s:0:\"\";s:9:\"has_title\";s:1:\"1\";s:11:\"title_label\";s:5:\"Title\";s:8:\"has_body\";s:1:\"1\";s:10:\"body_label\";s:4:\"Body\";s:14:\"min_word_count\";s:1:\"0\";s:6:\"custom\";s:1:\"1\";s:8:\"modified\";s:1:\"1\";s:6:\"locked\";s:1:\"0\";s:9:\"orig_type\";s:5:\"story\";}}",
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/content/node-type/story',
  'title' =&gt; 'Story',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/content_types.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/node-type/story/delete',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:24:"administer content types";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; "a:2:{i:0;s:24:\"node_type_delete_confirm\";i:1;O:8:\"stdClass\":14:{s:4:\"type\";s:5:\"story\";s:4:\"name\";s:5:\"Story\";s:6:\"module\";s:4:\"node\";s:11:\"description\";s:392:\"A &lt;em&gt;story&lt;/em&gt;, similar in form to a &lt;em&gt;page&lt;/em&gt;, is ideal for creating and displaying content that informs or engages website visitors. Press releases, site announcements, and informal blog-like entries may all be created with a &lt;em&gt;story&lt;/em&gt; entry. By default, a &lt;em&gt;story&lt;/em&gt; entry is automatically featured on the site's initial home page, and provides the ability to post comments.\";s:4:\"help\";s:0:\"\";s:9:\"has_title\";s:1:\"1\";s:11:\"title_label\";s:5:\"Title\";s:8:\"has_body\";s:1:\"1\";s:10:\"body_label\";s:4:\"Body\";s:14:\"min_word_count\";s:1:\"0\";s:6:\"custom\";s:1:\"1\";s:8:\"modified\";s:1:\"1\";s:6:\"locked\";s:1:\"0\";s:9:\"orig_type\";s:5:\"story\";}}",
  'fit' =&gt; '31',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/content/node-type/story/delete',
  'title' =&gt; 'Delete',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/content_types.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/node-type/story/edit',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:24:"administer content types";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; "a:2:{i:0;s:14:\"node_type_form\";i:1;O:8:\"stdClass\":14:{s:4:\"type\";s:5:\"story\";s:4:\"name\";s:5:\"Story\";s:6:\"module\";s:4:\"node\";s:11:\"description\";s:392:\"A &lt;em&gt;story&lt;/em&gt;, similar in form to a &lt;em&gt;page&lt;/em&gt;, is ideal for creating and displaying content that informs or engages website visitors. Press releases, site announcements, and informal blog-like entries may all be created with a &lt;em&gt;story&lt;/em&gt; entry. By default, a &lt;em&gt;story&lt;/em&gt; entry is automatically featured on the site's initial home page, and provides the ability to post comments.\";s:4:\"help\";s:0:\"\";s:9:\"has_title\";s:1:\"1\";s:11:\"title_label\";s:5:\"Title\";s:8:\"has_body\";s:1:\"1\";s:10:\"body_label\";s:4:\"Body\";s:14:\"min_word_count\";s:1:\"0\";s:6:\"custom\";s:1:\"1\";s:8:\"modified\";s:1:\"1\";s:6:\"locked\";s:1:\"0\";s:9:\"orig_type\";s:5:\"story\";}}",
  'fit' =&gt; '31',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; 'admin/content/node-type/story',
  'tab_root' =&gt; 'admin/content/node-type/story',
  'title' =&gt; 'Edit',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/content_types.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/node/overview',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:16:"administer nodes";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:18:"node_admin_content";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/content/node',
  'tab_root' =&gt; 'admin/content/node',
  'title' =&gt; 'List',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '-10',
  'file' =&gt; 'modules/node/node.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/rss-publishing',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:25:"system_rss_feeds_settings";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/content/rss-publishing',
  'title' =&gt; 'RSS publishing',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Configure the number of items per feed and whether feeds should be titles/teasers/full-text.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/types',
</codefragment>
  </duplication>
  <duplication lines="68" tokens="194">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="4622"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="6609"/>
    <codefragment>-&gt;values(array(
  'path' =&gt; 'admin/content/types',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:24:"administer content types";}',
  'page_callback' =&gt; 'node_overview_types',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/content/types',
  'title' =&gt; 'Content types',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Manage posts by content type, including default status, front page promotion, etc.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/content_types.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/types/add',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:24:"administer content types";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:14:"node_type_form";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/content/types',
  'tab_root' =&gt; 'admin/content/types',
  'title' =&gt; 'Add content type',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/content_types.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/content/types/list',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:24:"administer content types";}',
  'page_callback' =&gt; 'node_overview_types',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/content/types',
  'tab_root' =&gt; 'admin/content/types',
  'title' =&gt; 'List',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '-10',
  'file' =&gt; 'modules/node/content_types.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports',
</codefragment>
  </duplication>
  <duplication lines="1212" tokens="3470">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="4688"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="7005"/>
    <codefragment>-&gt;values(array(
  'path' =&gt; 'admin/reports',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:19:"access site reports";}',
  'page_callback' =&gt; 'system_admin_menu_block_page',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/reports',
  'title' =&gt; 'Reports',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'View reports from system logs and other status information.',
  'position' =&gt; 'left',
  'weight' =&gt; '5',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports/access-denied',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:19:"access site reports";}',
  'page_callback' =&gt; 'dblog_top',
  'page_arguments' =&gt; 'a:1:{i:0;s:13:"access denied";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/reports/access-denied',
  'title' =&gt; "Top 'access denied' errors",
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; "View 'access denied' errors (403s).",
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/dblog/dblog.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports/dblog',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:19:"access site reports";}',
  'page_callback' =&gt; 'dblog_overview',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/reports/dblog',
  'title' =&gt; 'Recent log entries',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'View events that have recently been logged.',
  'position' =&gt; '',
  'weight' =&gt; '-1',
  'file' =&gt; 'modules/dblog/dblog.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports/event/%',
  'load_functions' =&gt; 'a:1:{i:3;N;}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:19:"access site reports";}',
  'page_callback' =&gt; 'dblog_event',
  'page_arguments' =&gt; 'a:1:{i:0;i:3;}',
  'fit' =&gt; '14',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/reports/event/%',
  'title' =&gt; 'Details',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/dblog/dblog.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports/page-not-found',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:19:"access site reports";}',
  'page_callback' =&gt; 'dblog_top',
  'page_arguments' =&gt; 'a:1:{i:0;s:14:"page not found";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/reports/page-not-found',
  'title' =&gt; "Top 'page not found' errors",
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; "View 'page not found' errors (404s).",
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/dblog/dblog.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports/status',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'system_status',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/reports/status',
  'title' =&gt; 'Status report',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; "Get a status report about your site's operation and any detected problems.",
  'position' =&gt; '',
  'weight' =&gt; '10',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports/status/php',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'system_php',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/reports/status/php',
  'title' =&gt; 'PHP',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports/status/run-cron',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'system_run_cron',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/reports/status/run-cron',
  'title' =&gt; 'Run cron',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports/status/sql',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'system_sql',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/reports/status/sql',
  'title' =&gt; 'SQL',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports/updates',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'update_status',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/reports/updates',
  'title' =&gt; 'Available updates',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Get a status report about available updates for your installed modules and themes.',
  'position' =&gt; '',
  'weight' =&gt; '10',
  'file' =&gt; 'modules/update/update.report.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports/updates/check',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'update_manual_status',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/reports/updates/check',
  'title' =&gt; 'Manual update check',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/update/update.fetch.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports/updates/list',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'update_status',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/reports/updates',
  'tab_root' =&gt; 'admin/reports/updates',
  'title' =&gt; 'List',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/update/update.report.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/reports/updates/settings',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:15:"update_settings";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/reports/updates',
  'tab_root' =&gt; 'admin/reports/updates',
  'title' =&gt; 'Settings',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/update/update.settings.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:27:"access administration pages";}',
  'page_callback' =&gt; 'system_settings_overview',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings',
  'title' =&gt; 'Site configuration',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Adjust basic site configuration options.',
  'position' =&gt; 'right',
  'weight' =&gt; '-5',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/actions',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer actions";}',
  'page_callback' =&gt; 'system_actions_manage',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/actions',
  'title' =&gt; 'Actions',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Manage the actions defined for your site.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; '',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/actions/configure',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer actions";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:24:"system_actions_configure";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/actions/configure',
  'title' =&gt; 'Configure an advanced action',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; '',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/actions/delete/%',
  'load_functions' =&gt; 'a:1:{i:4;s:12:"actions_load";}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer actions";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:2:{i:0;s:26:"system_actions_delete_form";i:1;i:4;}',
  'fit' =&gt; '30',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/actions/delete/%',
  'title' =&gt; 'Delete action',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; 'Delete an action.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; '',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/actions/manage',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer actions";}',
  'page_callback' =&gt; 'system_actions_manage',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/settings/actions',
  'tab_root' =&gt; 'admin/settings/actions',
  'title' =&gt; 'Manage actions',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; 'Manage the actions defined for your site.',
  'position' =&gt; '',
  'weight' =&gt; '-2',
  'file' =&gt; '',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/actions/orphan',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer actions";}',
  'page_callback' =&gt; 'system_actions_remove_orphans',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/actions/orphan',
  'title' =&gt; 'Remove orphans',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; '',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/admin',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:27:"system_admin_theme_settings";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/admin',
  'title' =&gt; 'Administration theme',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; 'system_admin_theme_settings',
  'description' =&gt; 'Settings for how your administrative pages should look.',
  'position' =&gt; 'left',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/clean-urls',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:25:"system_clean_url_settings";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/clean-urls',
  'title' =&gt; 'Clean URLs',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Enable or disable clean URLs for your site.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/clean-urls/check',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '1',
  'access_arguments' =&gt; 'a:0:{}',
  'page_callback' =&gt; 'drupal_json',
  'page_arguments' =&gt; 'a:1:{i:0;a:1:{s:6:"status";b:1;}}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/clean-urls/check',
  'title' =&gt; 'Clean URL check',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; '',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/date-time',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:25:"system_date_time_settings";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/date-time',
  'title' =&gt; 'Date and time',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; "Settings for how Drupal displays date and time, as well as the system's default timezone.",
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/date-time/lookup',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'system_date_time_lookup',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/date-time/lookup',
  'title' =&gt; 'Date and time lookup',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/error-reporting',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:31:"system_error_reporting_settings";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/error-reporting',
  'title' =&gt; 'Error reporting',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Control how Drupal deals with errors including 403/404 errors as well as PHP error reporting.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/file-system',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:27:"system_file_system_settings";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/file-system',
  'title' =&gt; 'File system',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Tell Drupal where to store uploaded files and how they are accessed.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/filters',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer filters";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:21:"filter_admin_overview";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/filters',
  'title' =&gt; 'Input formats',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Configure how content input by users is filtered, including allowed HTML tags. Also allows enabling of module-provided filters.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/filter/filter.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/filters/%',
  'load_functions' =&gt; 'a:1:{i:3;s:18:"filter_format_load";}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer filters";}',
  'page_callback' =&gt; 'filter_admin_format_page',
  'page_arguments' =&gt; 'a:1:{i:0;i:3;}',
  'fit' =&gt; '14',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/filters/%',
  'title' =&gt; '',
  'title_callback' =&gt; 'filter_admin_format_title',
  'title_arguments' =&gt; 'a:1:{i:0;i:3;}',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/filter/filter.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/filters/%/configure',
  'load_functions' =&gt; 'a:1:{i:3;s:18:"filter_format_load";}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer filters";}',
  'page_callback' =&gt; 'filter_admin_configure_page',
  'page_arguments' =&gt; 'a:1:{i:0;i:3;}',
  'fit' =&gt; '29',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; 'admin/settings/filters/%',
  'tab_root' =&gt; 'admin/settings/filters/%',
  'title' =&gt; 'Configure',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '1',
  'file' =&gt; 'modules/filter/filter.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/filters/%/edit',
  'load_functions' =&gt; 'a:1:{i:3;s:18:"filter_format_load";}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer filters";}',
  'page_callback' =&gt; 'filter_admin_format_page',
  'page_arguments' =&gt; 'a:1:{i:0;i:3;}',
  'fit' =&gt; '29',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; 'admin/settings/filters/%',
  'tab_root' =&gt; 'admin/settings/filters/%',
  'title' =&gt; 'Edit',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/filter/filter.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/filters/%/order',
  'load_functions' =&gt; 'a:1:{i:3;s:18:"filter_format_load";}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer filters";}',
  'page_callback' =&gt; 'filter_admin_order_page',
  'page_arguments' =&gt; 'a:1:{i:0;i:3;}',
  'fit' =&gt; '29',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; 'admin/settings/filters/%',
  'tab_root' =&gt; 'admin/settings/filters/%',
  'title' =&gt; 'Rearrange',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '2',
  'file' =&gt; 'modules/filter/filter.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/filters/add',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer filters";}',
  'page_callback' =&gt; 'filter_admin_format_page',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/settings/filters',
  'tab_root' =&gt; 'admin/settings/filters',
  'title' =&gt; 'Add input format',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '1',
  'file' =&gt; 'modules/filter/filter.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/filters/delete',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer filters";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:19:"filter_admin_delete";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/filters/delete',
  'title' =&gt; 'Delete input format',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/filter/filter.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/filters/list',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:18:"administer filters";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:21:"filter_admin_overview";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/settings/filters',
  'tab_root' =&gt; 'admin/settings/filters',
  'title' =&gt; 'List',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/filter/filter.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/image-toolkit',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:29:"system_image_toolkit_settings";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/image-toolkit',
  'title' =&gt; 'Image toolkit',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Choose which image toolkit to use if you have installed optional toolkits.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/logging',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'system_logging_overview',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/logging',
  'title' =&gt; 'Logging and alerts',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; "Settings for logging and alerts modules. Various modules can route Drupal's system events to different destination, such as syslog, database, email, ...etc.",
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/logging/dblog',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:20:"dblog_admin_settings";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/logging/dblog',
  'title' =&gt; 'Database logging',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Settings for logging to the Drupal database logs. This is the most common method for small to medium sites on shared hosting. The logs are viewable from the admin pages.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/dblog/dblog.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/performance',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:27:"system_performance_settings";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/performance',
  'title' =&gt; 'Performance',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Enable or disable page caching for anonymous users and set CSS and JS bandwidth optimization options.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/site-information',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:32:"system_site_information_settings";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/site-information',
  'title' =&gt; 'Site information',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Change basic site information, such as the site name, slogan, e-mail address, mission, front page and more.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/settings/site-maintenance',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:29:"administer site configuration";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:32:"system_site_maintenance_settings";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/settings/site-maintenance',
  'title' =&gt; 'Site maintenance',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Take the site off-line for maintenance or bring it back online.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:27:"access administration pages";}',
  'page_callback' =&gt; 'system_admin_menu_block_page',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/user',
  'title' =&gt; 'User management',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; "Manage your site's users, groups and access to site features.",
  'position' =&gt; 'left',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/permissions',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:22:"administer permissions";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:15:"user_admin_perm";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/user/permissions',
  'title' =&gt; 'Permissions',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Determine access to features by selecting permissions for roles.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/roles',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:22:"administer permissions";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:19:"user_admin_new_role";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/user/roles',
  'title' =&gt; 'Roles',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'List, edit, or add user roles.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/roles/edit',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:22:"administer permissions";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:15:"user_admin_role";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/user/roles/edit',
  'title' =&gt; 'Edit role',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/rules',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:22:"administer permissions";}',
  'page_callback' =&gt; 'user_admin_access',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/user/rules',
  'title' =&gt; 'Access rules',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'List and create rules to disallow usernames, e-mail addresses, and IP addresses.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/rules/add',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:22:"administer permissions";}',
  'page_callback' =&gt; 'user_admin_access_add',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/user/rules',
  'tab_root' =&gt; 'admin/user/rules',
  'title' =&gt; 'Add rule',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/rules/check',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:22:"administer permissions";}',
  'page_callback' =&gt; 'user_admin_access_check',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/user/rules',
  'tab_root' =&gt; 'admin/user/rules',
  'title' =&gt; 'Check rules',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/rules/delete',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:22:"administer permissions";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:32:"user_admin_access_delete_confirm";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/user/rules/delete',
  'title' =&gt; 'Delete rule',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/rules/edit',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:22:"administer permissions";}',
  'page_callback' =&gt; 'user_admin_access_edit',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/user/rules/edit',
  'title' =&gt; 'Edit rule',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/rules/list',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:22:"administer permissions";}',
  'page_callback' =&gt; 'user_admin_access',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/user/rules',
  'tab_root' =&gt; 'admin/user/rules',
  'title' =&gt; 'List',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '-10',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/settings',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:16:"administer users";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:19:"user_admin_settings";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/user/settings',
  'title' =&gt; 'User settings',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'Configure default behavior of users, including registration requirements, e-mails, and user pictures.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/user',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:16:"administer users";}',
  'page_callback' =&gt; 'user_admin',
  'page_arguments' =&gt; 'a:1:{i:0;s:4:"list";}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'admin/user/user',
  'title' =&gt; 'Users',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; 'List, add, and edit users.',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/user/create',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:16:"administer users";}',
  'page_callback' =&gt; 'user_admin',
  'page_arguments' =&gt; 'a:1:{i:0;s:6:"create";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/user/user',
  'tab_root' =&gt; 'admin/user/user',
  'title' =&gt; 'Add user',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'admin/user/user/list',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:16:"administer users";}',
  'page_callback' =&gt; 'user_admin',
  'page_arguments' =&gt; 'a:1:{i:0;s:4:"list";}',
  'fit' =&gt; '15',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'admin/user/user',
  'tab_root' =&gt; 'admin/user/user',
  'title' =&gt; 'List',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '-10',
  'file' =&gt; 'modules/user/user.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'batch',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '1',
  'access_arguments' =&gt; 'a:0:{}',
  'page_callback' =&gt; 'system_batch_page',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '1',
  'number_parts' =&gt; '1',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'batch',
  'title' =&gt; '',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/system/system.admin.inc',
))
-&gt;values(array(
  'path' =&gt; 'filter/tips',
</codefragment>
  </duplication>
  <duplication lines="134" tokens="383">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="5898"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="8281"/>
    <codefragment>-&gt;values(array(
  'path' =&gt; 'filter/tips',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '1',
  'access_arguments' =&gt; 'a:0:{}',
  'page_callback' =&gt; 'filter_tips_long',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'filter/tips',
  'title' =&gt; 'Compose tips',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '20',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/filter/filter.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'logout',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_is_logged_in',
  'access_arguments' =&gt; 'a:0:{}',
  'page_callback' =&gt; 'user_logout',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '1',
  'number_parts' =&gt; '1',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'logout',
  'title' =&gt; 'Log out',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '10',
  'file' =&gt; 'modules/user/user.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'node',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:14:"access content";}',
  'page_callback' =&gt; 'node_page_default',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '1',
  'number_parts' =&gt; '1',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'node',
  'title' =&gt; 'Content',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; '',
))
-&gt;values(array(
  'path' =&gt; 'node/%',
  'load_functions' =&gt; 'a:1:{i:1;s:9:"node_load";}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'node_access',
  'access_arguments' =&gt; 'a:2:{i:0;s:4:"view";i:1;i:1;}',
  'page_callback' =&gt; 'node_page_view',
  'page_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'fit' =&gt; '2',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'node/%',
  'title' =&gt; '',
  'title_callback' =&gt; 'node_page_title',
  'title_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; '',
))
-&gt;values(array(
  'path' =&gt; 'node/%/delete',
  'load_functions' =&gt; 'a:1:{i:1;s:9:"node_load";}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'node_access',
  'access_arguments' =&gt; 'a:2:{i:0;s:6:"delete";i:1;i:1;}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:2:{i:0;s:19:"node_delete_confirm";i:1;i:1;}',
  'fit' =&gt; '5',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'node/%/delete',
  'title' =&gt; 'Delete',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '1',
  'file' =&gt; 'modules/node/node.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'node/%/edit',
  'load_functions' =&gt; 'a:1:{i:1;s:9:"node_load";}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'node_access',
  'access_arguments' =&gt; 'a:2:{i:0;s:6:"update";i:1;i:1;}',
  'page_callback' =&gt; 'node_page_edit',
  'page_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'fit' =&gt; '5',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; 'node/%',
  'tab_root' =&gt; 'node/%',
  'title' =&gt; 'Edit',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '1',
  'file' =&gt; 'modules/node/node.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'node/%/revisions',
</codefragment>
  </duplication>
  <duplication lines="112" tokens="320">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="6030"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="8435"/>
    <codefragment>-&gt;values(array(
  'path' =&gt; 'node/%/revisions',
  'load_functions' =&gt; 'a:1:{i:1;s:9:"node_load";}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '_node_revision_access',
  'access_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'page_callback' =&gt; 'node_revision_overview',
  'page_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'fit' =&gt; '5',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; 'node/%',
  'tab_root' =&gt; 'node/%',
  'title' =&gt; 'Revisions',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '2',
  'file' =&gt; 'modules/node/node.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'node/%/revisions/%/delete',
  'load_functions' =&gt; 'a:2:{i:1;a:1:{s:9:"node_load";a:1:{i:0;i:3;}}i:3;N;}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '_node_revision_access',
  'access_arguments' =&gt; 'a:2:{i:0;i:1;i:1;s:6:"delete";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:2:{i:0;s:28:"node_revision_delete_confirm";i:1;i:1;}',
  'fit' =&gt; '21',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'node/%/revisions/%/delete',
  'title' =&gt; 'Delete earlier revision',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/node.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'node/%/revisions/%/revert',
  'load_functions' =&gt; 'a:2:{i:1;a:1:{s:9:"node_load";a:1:{i:0;i:3;}}i:3;N;}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '_node_revision_access',
  'access_arguments' =&gt; 'a:2:{i:0;i:1;i:1;s:6:"update";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:2:{i:0;s:28:"node_revision_revert_confirm";i:1;i:1;}',
  'fit' =&gt; '21',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'node/%/revisions/%/revert',
  'title' =&gt; 'Revert to earlier revision',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/node.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'node/%/revisions/%/view',
  'load_functions' =&gt; 'a:2:{i:1;a:1:{s:9:"node_load";a:1:{i:0;i:3;}}i:3;N;}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '_node_revision_access',
  'access_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'page_callback' =&gt; 'node_show',
  'page_arguments' =&gt; 'a:3:{i:0;i:1;i:1;N;i:2;b:1;}',
  'fit' =&gt; '21',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'node/%/revisions/%/view',
  'title' =&gt; 'Revisions',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; '',
))
-&gt;values(array(
  'path' =&gt; 'node/%/view',
  'load_functions' =&gt; 'a:1:{i:1;s:9:"node_load";}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'node_access',
  'access_arguments' =&gt; 'a:2:{i:0;s:4:"view";i:1;i:1;}',
  'page_callback' =&gt; 'node_page_view',
  'page_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'fit' =&gt; '5',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; 'node/%',
  'tab_root' =&gt; 'node/%',
  'title' =&gt; 'View',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '-10',
  'file' =&gt; '',
))
-&gt;values(array(
  'path' =&gt; 'node/add',
</codefragment>
  </duplication>
  <duplication lines="46" tokens="131">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="6140"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="8567"/>
    <codefragment>-&gt;values(array(
  'path' =&gt; 'node/add',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '_node_add_access',
  'access_arguments' =&gt; 'a:0:{}',
  'page_callback' =&gt; 'node_add_page',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'node/add',
  'title' =&gt; 'Create content',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '1',
  'file' =&gt; 'modules/node/node.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'node/add/page',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'node_access',
  'access_arguments' =&gt; 'a:2:{i:0;s:6:"create";i:1;s:4:"page";}',
  'page_callback' =&gt; 'node_add',
  'page_arguments' =&gt; 'a:1:{i:0;i:2;}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'node/add/page',
  'title' =&gt; 'Page',
  'title_callback' =&gt; 'check_plain',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; "A &lt;em&gt;page&lt;/em&gt;, similar in form to a &lt;em&gt;story&lt;/em&gt;, is a simple method for creating and displaying information that rarely changes, such as an \"About us\" section of a website. By default, a &lt;em&gt;page&lt;/em&gt; entry does not allow visitor comments and is not featured on the site's initial home page.",
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/node.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'node/add/story',
</codefragment>
  </duplication>
  <duplication lines="28" tokens="77">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="6180"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="8629"/>
    <codefragment>  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/node.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'node/add/story',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'node_access',
  'access_arguments' =&gt; 'a:2:{i:0;s:6:"create";i:1;s:5:"story";}',
  'page_callback' =&gt; 'node_add',
  'page_arguments' =&gt; 'a:1:{i:0;i:2;}',
  'fit' =&gt; '7',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'node/add/story',
  'title' =&gt; 'Story',
  'title_callback' =&gt; 'check_plain',
  'title_arguments' =&gt; '',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; "A &lt;em&gt;story&lt;/em&gt;, similar in form to a &lt;em&gt;page&lt;/em&gt;, is ideal for creating and displaying content that informs or engages website visitors. Press releases, site announcements, and informal blog-like entries may all be created with a &lt;em&gt;story&lt;/em&gt; entry. By default, a &lt;em&gt;story&lt;/em&gt; entry is automatically featured on the site's initial home page, and provides the ability to post comments.",
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/node/node.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'rss.xml',
</codefragment>
  </duplication>
  <duplication lines="46" tokens="131">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="6206"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="8699"/>
    <codefragment>-&gt;values(array(
  'path' =&gt; 'rss.xml',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:14:"access content";}',
  'page_callback' =&gt; 'node_feed',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '1',
  'number_parts' =&gt; '1',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'rss.xml',
  'title' =&gt; 'RSS feed',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; '',
))
-&gt;values(array(
  'path' =&gt; 'system/files',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '1',
  'access_arguments' =&gt; 'a:0:{}',
  'page_callback' =&gt; 'file_download',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'system/files',
  'title' =&gt; 'File download',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; '',
))
-&gt;values(array(
  'path' =&gt; 'user',
</codefragment>
  </duplication>
  <duplication lines="379" tokens="964">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="6250"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="8787"/>
    <codefragment>-&gt;values(array(
  'path' =&gt; 'user',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '1',
  'access_arguments' =&gt; 'a:0:{}',
  'page_callback' =&gt; 'user_page',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '1',
  'number_parts' =&gt; '1',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'user',
  'title' =&gt; 'User account',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'user/%',
  'load_functions' =&gt; 'a:1:{i:1;s:22:"user_uid_optional_load";}',
  'to_arg_functions' =&gt; 'a:1:{i:1;s:24:"user_uid_optional_to_arg";}',
  'access_callback' =&gt; 'user_view_access',
  'access_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'page_callback' =&gt; 'user_view',
  'page_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'fit' =&gt; '2',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'user/%',
  'title' =&gt; 'My account',
  'title_callback' =&gt; 'user_page_title',
  'title_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'type' =&gt; '6',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'user/%/delete',
  'load_functions' =&gt; 'a:1:{i:1;s:9:"user_load";}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:16:"administer users";}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:2:{i:0;s:19:"user_confirm_delete";i:1;i:1;}',
  'fit' =&gt; '5',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'user/%/delete',
  'title' =&gt; 'Delete',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'user/%/edit',
  'load_functions' =&gt; 'a:1:{i:1;a:1:{s:18:"user_category_load";a:2:{i:0;s:4:"%map";i:1;s:6:"%index";}}}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_edit_access',
  'access_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'page_callback' =&gt; 'user_edit',
  'page_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'fit' =&gt; '5',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; 'user/%',
  'tab_root' =&gt; 'user/%',
  'title' =&gt; 'Edit',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'user/%/edit/account',
  'load_functions' =&gt; 'a:1:{i:1;a:1:{s:18:"user_category_load";a:2:{i:0;s:4:"%map";i:1;s:6:"%index";}}}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_edit_access',
  'access_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'page_callback' =&gt; 'user_edit',
  'page_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'fit' =&gt; '11',
  'number_parts' =&gt; '4',
  'tab_parent' =&gt; 'user/%/edit',
  'tab_root' =&gt; 'user/%',
  'title' =&gt; 'Account',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'user/%/view',
  'load_functions' =&gt; 'a:1:{i:1;s:9:"user_load";}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_view_access',
  'access_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'page_callback' =&gt; 'user_view',
  'page_arguments' =&gt; 'a:1:{i:0;i:1;}',
  'fit' =&gt; '5',
  'number_parts' =&gt; '3',
  'tab_parent' =&gt; 'user/%',
  'tab_root' =&gt; 'user/%',
  'title' =&gt; 'View',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '-10',
  'file' =&gt; 'modules/user/user.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'user/autocomplete',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_access',
  'access_arguments' =&gt; 'a:1:{i:0;s:20:"access user profiles";}',
  'page_callback' =&gt; 'user_autocomplete',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'user/autocomplete',
  'title' =&gt; 'User autocomplete',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'user/login',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_is_anonymous',
  'access_arguments' =&gt; 'a:0:{}',
  'page_callback' =&gt; 'user_page',
  'page_arguments' =&gt; 'a:0:{}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; 'user',
  'tab_root' =&gt; 'user',
  'title' =&gt; 'Log in',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '136',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'user/password',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_is_anonymous',
  'access_arguments' =&gt; 'a:0:{}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:9:"user_pass";}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; 'user',
  'tab_root' =&gt; 'user',
  'title' =&gt; 'Request new password',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'user/register',
  'load_functions' =&gt; '',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; 'user_register_access',
  'access_arguments' =&gt; 'a:0:{}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:1:{i:0;s:13:"user_register";}',
  'fit' =&gt; '3',
  'number_parts' =&gt; '2',
  'tab_parent' =&gt; 'user',
  'tab_root' =&gt; 'user',
  'title' =&gt; 'Create new account',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '128',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.pages.inc',
))
-&gt;values(array(
  'path' =&gt; 'user/reset/%/%/%',
  'load_functions' =&gt; 'a:3:{i:2;N;i:3;N;i:4;N;}',
  'to_arg_functions' =&gt; '',
  'access_callback' =&gt; '1',
  'access_arguments' =&gt; 'a:0:{}',
  'page_callback' =&gt; 'drupal_get_form',
  'page_arguments' =&gt; 'a:4:{i:0;s:15:"user_pass_reset";i:1;i:2;i:2;i:3;i:3;i:4;}',
  'fit' =&gt; '24',
  'number_parts' =&gt; '5',
  'tab_parent' =&gt; '',
  'tab_root' =&gt; 'user/reset/%/%/%',
  'title' =&gt; 'Reset password',
  'title_callback' =&gt; 't',
  'title_arguments' =&gt; '',
  'type' =&gt; '4',
  'block_callback' =&gt; '',
  'description' =&gt; '',
  'position' =&gt; '',
  'weight' =&gt; '0',
  'file' =&gt; 'modules/user/user.pages.inc',
))
-&gt;execute();

db_create_table('node', array(
  'fields' =&gt; array(
    'nid' =&gt; array(
      'type' =&gt; 'serial',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
    'vid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'type' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 32,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'language' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 12,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'title' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'uid' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'status' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 1,
    ),
    'created' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'changed' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'comment' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'promote' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'moderate' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'sticky' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'tnid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'translate' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'indexes' =&gt; array(
    'node_changed' =&gt; array(
      'changed',
    ),
    'node_created' =&gt; array(
      'created',
    ),
    'node_moderate' =&gt; array(
      'moderate',
    ),
    'node_promote_status' =&gt; array(
      'promote',
      'status',
    ),
    'node_status_type' =&gt; array(
      'status',
      'type',
      'nid',
    ),
    'node_title_type' =&gt; array(
      'title',
      array(
        'type',
      4,
      ),
    ),
    'node_type' =&gt; array(
      array(
        'type',
      4,
      ),
    ),
    'uid' =&gt; array(
      'uid',
    ),
    'tnid' =&gt; array(
      'tnid',
    ),
    'translate' =&gt; array(
      'translate',
    ),
  ),
  'unique keys' =&gt; array(
    'vid' =&gt; array(
      'vid',
    ),
  ),
  'primary key' =&gt; array(
    'nid',
  ),
  'module' =&gt; 'node',
  'name' =&gt; 'node',
</codefragment>
  </duplication>
  <duplication lines="69" tokens="152">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="6631"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="9815"/>
    <codefragment>db_create_table('node_access', array(
  'fields' =&gt; array(
    'nid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'gid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'realm' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'grant_view' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'grant_update' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'grant_delete' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
  ),
  'primary key' =&gt; array(
    'nid',
    'gid',
    'realm',
  ),
  'module' =&gt; 'node',
  'name' =&gt; 'node_access',
));
db_insert('node_access')-&gt;fields(array(
  'nid',
  'gid',
  'realm',
  'grant_view',
  'grant_update',
  'grant_delete',
))
-&gt;values(array(
  'nid' =&gt; '0',
  'gid' =&gt; '0',
  'realm' =&gt; 'all',
  'grant_view' =&gt; '1',
  'grant_update' =&gt; '0',
  'grant_delete' =&gt; '0',
))
-&gt;execute();

db_create_table('node_counter', array(
</codefragment>
  </duplication>
  <duplication lines="102" tokens="224">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="6695"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="10188"/>
    <codefragment>  'grant_delete' =&gt; '0',
))
-&gt;execute();

db_create_table('node_counter', array(
  'fields' =&gt; array(
    'nid' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'totalcount' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'big',
    ),
    'daycount' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'medium',
    ),
    'timestamp' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'primary key' =&gt; array(
    'nid',
  ),
  'module' =&gt; 'node',
  'name' =&gt; 'node_counter',
));

db_create_table('node_revisions', array(
  'fields' =&gt; array(
    'nid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'vid' =&gt; array(
      'type' =&gt; 'serial',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
    'uid' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'title' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'body' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
      'size' =&gt; 'big',
    ),
    'teaser' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
      'size' =&gt; 'big',
    ),
    'log' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
      'size' =&gt; 'big',
    ),
    'timestamp' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'format' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'indexes' =&gt; array(
    'nid' =&gt; array(
      'nid',
    ),
    'uid' =&gt; array(
      'uid',
    ),
  ),
  'primary key' =&gt; array(
    'vid',
  ),
  'module' =&gt; 'node',
  'name' =&gt; 'node_revisions',
</codefragment>
  </duplication>
  <duplication lines="123" tokens="283">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="6799"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="10843"/>
    <codefragment>db_create_table('node_type', array(
  'fields' =&gt; array(
    'type' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 32,
      'not null' =&gt; TRUE,
    ),
    'name' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'module' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
    ),
    'description' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
      'size' =&gt; 'medium',
    ),
    'help' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
      'size' =&gt; 'medium',
    ),
    'has_title' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'size' =&gt; 'tiny',
    ),
    'title_label' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'has_body' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'size' =&gt; 'tiny',
    ),
    'body_label' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'min_word_count' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'size' =&gt; 'small',
    ),
    'custom' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'modified' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'locked' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'orig_type' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
  ),
  'primary key' =&gt; array(
    'type',
  ),
  'module' =&gt; 'node',
  'name' =&gt; 'node_type',
));
db_insert('node_type')-&gt;fields(array(
  'type',
  'name',
  'module',
  'description',
  'help',
  'has_title',
  'title_label',
  'has_body',
  'body_label',
  'min_word_count',
  'custom',
  'modified',
  'locked',
  'orig_type',
))
-&gt;values(array(
  'type' =&gt; 'page',
  'name' =&gt; 'Page',
  'module' =&gt; 'node',
  'description' =&gt; "A &lt;em&gt;page&lt;/em&gt;, similar in form to a &lt;em&gt;story&lt;/em&gt;, is a simple method for creating and displaying information that rarely changes, such as an \"About us\" section of a website. By default, a &lt;em&gt;page&lt;/em&gt; entry does not allow visitor comments and is not featured on the site's initial home page.",
  'help' =&gt; '',
  'has_title' =&gt; '1',
  'title_label' =&gt; 'Title',
  'has_body' =&gt; '1',
  'body_label' =&gt; 'Body',
  'min_word_count' =&gt; '0',
  'custom' =&gt; '1',
  'modified' =&gt; '1',
  'locked' =&gt; '0',
  'orig_type' =&gt; 'page',
))
-&gt;values(array(
  'type' =&gt; 'story',
</codefragment>
  </duplication>
  <duplication lines="74" tokens="163">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="6920"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="10980"/>
    <codefragment>-&gt;values(array(
  'type' =&gt; 'story',
  'name' =&gt; 'Story',
  'module' =&gt; 'node',
  'description' =&gt; "A &lt;em&gt;story&lt;/em&gt;, similar in form to a &lt;em&gt;page&lt;/em&gt;, is ideal for creating and displaying content that informs or engages website visitors. Press releases, site announcements, and informal blog-like entries may all be created with a &lt;em&gt;story&lt;/em&gt; entry. By default, a &lt;em&gt;story&lt;/em&gt; entry is automatically featured on the site's initial home page, and provides the ability to post comments.",
  'help' =&gt; '',
  'has_title' =&gt; '1',
  'title_label' =&gt; 'Title',
  'has_body' =&gt; '1',
  'body_label' =&gt; 'Body',
  'min_word_count' =&gt; '0',
  'custom' =&gt; '1',
  'modified' =&gt; '1',
  'locked' =&gt; '0',
  'orig_type' =&gt; 'story',
))
-&gt;execute();

db_create_table('permission', array(
  'fields' =&gt; array(
    'pid' =&gt; array(
      'type' =&gt; 'serial',
      'not null' =&gt; TRUE,
    ),
    'rid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'perm' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
    'tid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'primary key' =&gt; array(
    'pid',
  ),
  'indexes' =&gt; array(
    'rid' =&gt; array(
      'rid',
    ),
  ),
  'module' =&gt; 'user',
  'name' =&gt; 'permission',
));
db_insert('permission')-&gt;fields(array(
  'pid',
  'rid',
  'perm',
  'tid',
))
-&gt;values(array(
  'pid' =&gt; '1',
  'rid' =&gt; '1',
  'perm' =&gt; 'access content',
  'tid' =&gt; '0',
))
-&gt;values(array(
  'pid' =&gt; '2',
  'rid' =&gt; '2',
  'perm' =&gt; 'access comments, access content, post comments, post comments without approval',
  'tid' =&gt; '0',
))
-&gt;execute();

db_create_table('role', array(
</codefragment>
  </duplication>
  <duplication lines="238" tokens="476">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="6991"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="11609"/>
    <codefragment>-&gt;execute();

db_create_table('role', array(
  'fields' =&gt; array(
    'rid' =&gt; array(
      'type' =&gt; 'serial',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
    'name' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 64,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
  ),
  'unique keys' =&gt; array(
    'name' =&gt; array(
      'name',
    ),
  ),
  'primary key' =&gt; array(
    'rid',
  ),
  'module' =&gt; 'user',
  'name' =&gt; 'role',
));
db_insert('role')-&gt;fields(array(
  'rid',
  'name',
))
-&gt;values(array(
  'rid' =&gt; '1',
  'name' =&gt; 'anonymous user',
))
-&gt;values(array(
  'rid' =&gt; '2',
  'name' =&gt; 'authenticated user',
))
-&gt;execute();

db_create_table('semaphore', array(
  'fields' =&gt; array(
    'name' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'value' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'expire' =&gt; array(
      'type' =&gt; 'float',
      'size' =&gt; 'big',
      'not null' =&gt; TRUE,
    ),
  ),
  'indexes' =&gt; array(
    'expire' =&gt; array(
      'expire',
    ),
  ),
  'primary key' =&gt; array(
    'name',
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'semaphore',
));

db_create_table('sessions', array(
  'fields' =&gt; array(
    'uid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
    'sid' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 64,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'hostname' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 128,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'timestamp' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'cache' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'session' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
  ),
  'primary key' =&gt; array(
    'sid',
  ),
  'indexes' =&gt; array(
    'timestamp' =&gt; array(
      'timestamp',
    ),
    'uid' =&gt; array(
      'uid',
    ),
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'sessions',
));

db_create_table('system', array(
  'fields' =&gt; array(
    'filename' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'name' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'type' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'owner' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'status' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'throttle' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'bootstrap' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'schema_version' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; -1,
      'size' =&gt; 'small',
    ),
    'weight' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'info' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
  ),
  'primary key' =&gt; array(
    'filename',
  ),
  'indexes' =&gt; array(
    'modules' =&gt; array(
      array(
        'type',
      12,
      ),
      'status',
      'weight',
      'filename',
    ),
    'bootstrap' =&gt; array(
      array(
        'type',
      12,
      ),
      'status',
      'bootstrap',
      'weight',
      'filename',
    ),
    'type_name' =&gt; array(
      array(
        'type',
      12,
      ),
      'name',
    ),
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'system',
));
db_insert('system')-&gt;fields(array(
  'filename',
  'name',
  'type',
  'owner',
  'status',
  'throttle',
  'bootstrap',
  'schema_version',
  'weight',
  'info',
))
-&gt;values(array(
  'filename' =&gt; 'modules/aggregator/aggregator.module',
  'name' =&gt; 'aggregator',
  'type' =&gt; 'module',
  'owner' =&gt; '',
  'status' =&gt; '0',
  'throttle' =&gt; '0',
  'bootstrap' =&gt; '0',
  'schema_version' =&gt; '-1',
  'weight' =&gt; '0',
  'info' =&gt; 'a:10:{s:4:"name";s:10:"Aggregator";s:11:"description";s:57:"Aggregates syndicated content (RSS, RDF, and Atom feeds).";s:7:"package";s:15:"Core - optional";s:7:"version";s:4:"6.17";s:4:"core";s:3:"6.x";s:7:"project";s:6:"drupal";s:9:"datestamp";s:10:"1275505216";s:12:"dependencies";a:0:{}s:10:"dependents";a:0:{}s:3:"php";s:5:"4.3.5";}',
</codefragment>
  </duplication>
  <duplication lines="45" tokens="91">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="7688"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="18992"/>
    <codefragment>db_create_table('url_alias', array(
  'fields' =&gt; array(
    'pid' =&gt; array(
      'type' =&gt; 'serial',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
    'src' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 128,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'dst' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 128,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'language' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 12,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
  ),
  'unique keys' =&gt; array(
    'dst_language_pid' =&gt; array(
      'dst',
      'language',
      'pid',
    ),
  ),
  'primary key' =&gt; array(
    'pid',
  ),
  'indexes' =&gt; array(
    'src_language_pid' =&gt; array(
      'src',
      'language',
      'pid',
    ),
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'url_alias',
</codefragment>
  </duplication>
  <duplication lines="170" tokens="376">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="7735"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="19340"/>
    <codefragment>db_create_table('users', array(
  'fields' =&gt; array(
    'uid' =&gt; array(
      'type' =&gt; 'serial',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
    ),
    'name' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 60,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'pass' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 32,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'mail' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 64,
      'not null' =&gt; FALSE,
      'default' =&gt; '',
    ),
    'mode' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'sort' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; FALSE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'threshold' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; FALSE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'theme' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'signature' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'signature_format' =&gt; array(
      'type' =&gt; 'int',
      'size' =&gt; 'small',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'created' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'access' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'login' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'status' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'timezone' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 8,
      'not null' =&gt; FALSE,
    ),
    'language' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 12,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'picture' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'init' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 64,
      'not null' =&gt; FALSE,
      'default' =&gt; '',
    ),
    'data' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
      'size' =&gt; 'big',
    ),
  ),
  'indexes' =&gt; array(
    'access' =&gt; array(
      'access',
    ),
    'created' =&gt; array(
      'created',
    ),
    'mail' =&gt; array(
      'mail',
    ),
  ),
  'unique keys' =&gt; array(
    'name' =&gt; array(
      'name',
    ),
  ),
  'primary key' =&gt; array(
    'uid',
  ),
  'module' =&gt; 'user',
  'name' =&gt; 'users',
));
db_insert('users')-&gt;fields(array(
  'uid',
  'name',
  'pass',
  'mail',
  'mode',
  'sort',
  'threshold',
  'theme',
  'signature',
  'signature_format',
  'created',
  'access',
  'login',
  'status',
  'timezone',
  'language',
  'picture',
  'init',
  'data',
))
-&gt;values(array(
  'uid' =&gt; 1,
  'name' =&gt; '',
  'pass' =&gt; '',
  'mail' =&gt; '',
  'mode' =&gt; '0',
  'sort' =&gt; '0',
  'threshold' =&gt; '0',
  'theme' =&gt; '',
  'signature' =&gt; '',
  'signature_format' =&gt; '0',
  'created' =&gt; '0',
  'access' =&gt; '0',
  'login' =&gt; '0',
  'status' =&gt; '0',
  'timezone' =&gt; '-21600',
</codefragment>
  </duplication>
  <duplication lines="62" tokens="125">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="7931"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="19662"/>
    <codefragment>-&gt;execute();
db_query('UPDATE {users} SET uid = uid - 1');

db_create_table('users_roles', array(
  'fields' =&gt; array(
    'uid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'rid' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'primary key' =&gt; array(
    'uid',
    'rid',
  ),
  'indexes' =&gt; array(
    'rid' =&gt; array(
      'rid',
    ),
  ),
  'module' =&gt; 'user',
  'name' =&gt; 'users_roles',
));

db_create_table('variable', array(
  'fields' =&gt; array(
    'name' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 128,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'value' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
      'size' =&gt; 'big',
    ),
  ),
  'primary key' =&gt; array(
    'name',
  ),
  'module' =&gt; 'system',
  'name' =&gt; 'variable',
));
db_insert('variable')-&gt;fields(array(
  'name',
  'value',
))
-&gt;values(array(
  'name' =&gt; 'clean_url',
  'value' =&gt; 's:1:"1";',
))
-&gt;values(array(
  'name' =&gt; 'comment_page',
  'value' =&gt; 's:21:"COMMENT_NODE_DISABLED";',
</codefragment>
  </duplication>
  <duplication lines="72" tokens="163">
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.bare.database.php" line="8058"/>
    <file path="C:\wamp\www\Test\modules\simpletest\tests\upgrade\drupal-6.filled.database.php" line="20311"/>
    <codefragment>-&gt;execute();

db_create_table('watchdog', array(
  'fields' =&gt; array(
    'wid' =&gt; array(
      'type' =&gt; 'serial',
      'not null' =&gt; TRUE,
    ),
    'uid' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
    'type' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 16,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'message' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
      'size' =&gt; 'big',
    ),
    'variables' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
      'size' =&gt; 'big',
    ),
    'severity' =&gt; array(
      'type' =&gt; 'int',
      'unsigned' =&gt; TRUE,
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
      'size' =&gt; 'tiny',
    ),
    'link' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 255,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'location' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; TRUE,
    ),
    'referer' =&gt; array(
      'type' =&gt; 'text',
      'not null' =&gt; FALSE,
    ),
    'hostname' =&gt; array(
      'type' =&gt; 'varchar',
      'length' =&gt; 128,
      'not null' =&gt; TRUE,
      'default' =&gt; '',
    ),
    'timestamp' =&gt; array(
      'type' =&gt; 'int',
      'not null' =&gt; TRUE,
      'default' =&gt; 0,
    ),
  ),
  'primary key' =&gt; array(
    'wid',
  ),
  'indexes' =&gt; array(
    'type' =&gt; array(
      'type',
    ),
  ),
  'module' =&gt; 'dblog',
  'name' =&gt; 'watchdog',
</codefragment>
  </duplication>
  <duplication lines="45" tokens="74">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="98"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="87"/>
    <codefragment>  public function __construct($test_id = NULL) {
    $this-&gt;testId = $test_id;
  }

  /**
   * Internal helper: stores the assert.
   *
   * @param $status
   *   Can be 'pass', 'fail', 'exception'.
   *   TRUE is a synonym for 'pass', FALSE for 'fail'.
   * @param $message
   *   The message string.
   * @param $group
   *   Which group this assert belongs to.
   * @param $caller
   *   By default, the assert comes from a function whose name starts with
   *   'test'. Instead, you can specify where this assert originates from
   *   by passing in an associative array as $caller. Key 'file' is
   *   the name of the source file, 'line' is the line number and 'function'
   *   is the caller function itself.
   */
  protected function assert($status, $message = '', $group = 'Other', array $caller = NULL) {
    // Convert boolean status to string status.
    if (is_bool($status)) {
      $status = $status ? 'pass' : 'fail';
    }

    // Increment summary result counter.
    $this-&gt;results['#' . $status]++;

    // Get the function information about the call to the assertion method.
    if (!$caller) {
      $caller = $this-&gt;getAssertionCall();
    }

    // Creation assertion array that can be displayed while tests are running.
    $this-&gt;assertions[] = $assertion = array(
      'test_id' =&gt; $this-&gt;testId,
      'test_class' =&gt; get_class($this),
      'status' =&gt; $status,
      'message' =&gt; $message,
      'message_group' =&gt; $group,
      'function' =&gt; $caller['function'],
      'line' =&gt; $caller['line'],
      'file' =&gt; $caller['file'],
</codefragment>
  </duplication>
  <duplication lines="295" tokens="430">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="155"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="136"/>
    <codefragment>      -&gt;insert('simpletest')
      -&gt;fields($assertion)
      -&gt;execute();

    // We do not use a ternary operator here to allow a breakpoint on
    // test failure.
    if ($status == 'pass') {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }

  /**
   * Store an assertion from outside the testing context.
   *
   * This is useful for inserting assertions that can only be recorded after
   * the test case has been destroyed, such as PHP fatal errors. The caller
   * information is not automatically gathered since the caller is most likely
   * inserting the assertion on behalf of other code. In all other respects
   * the method behaves just like DrupalTestCase::assert() in terms of storing
   * the assertion.
   *
   * @return
   *   Message ID of the stored assertion.
   *
   * @see DrupalTestCase::assert()
   * @see DrupalTestCase::deleteAssert()
   */
  public static function insertAssert($test_id, $test_class, $status, $message = '', $group = 'Other', array $caller = array()) {
    // Convert boolean status to string status.
    if (is_bool($status)) {
      $status = $status ? 'pass' : 'fail';
    }

    $caller += array(
      'function' =&gt; t('Unknown'),
      'line' =&gt; 0,
      'file' =&gt; t('Unknown'),
    );

    $assertion = array(
      'test_id' =&gt; $test_id,
      'test_class' =&gt; $test_class,
      'status' =&gt; $status,
      'message' =&gt; $message,
      'message_group' =&gt; $group,
      'function' =&gt; $caller['function'],
      'line' =&gt; $caller['line'],
      'file' =&gt; $caller['file'],
    );

    return db_insert('simpletest')
      -&gt;fields($assertion)
      -&gt;execute();
  }

  /**
   * Delete an assertion record by message ID.
   *
   * @param $message_id
   *   Message ID of the assertion to delete.
   * @return
   *   TRUE if the assertion was deleted, FALSE otherwise.
   *
   * @see DrupalTestCase::insertAssert()
   */
  public static function deleteAssert($message_id) {
    return (bool) db_delete('simpletest')
      -&gt;condition('message_id', $message_id)
      -&gt;execute();
  }

  /**
   * Cycles through backtrace until the first non-assertion method is found.
   *
   * @return
   *   Array representing the true caller.
   */
  protected function getAssertionCall() {
    $backtrace = debug_backtrace();

    // The first element is the call. The second element is the caller.
    // We skip calls that occurred in one of the methods of our base classes
    // or in an assertion function.
   while (($caller = $backtrace[1]) &amp;&amp;
         ((isset($caller['class']) &amp;&amp; isset($this-&gt;skipClasses[$caller['class']])) ||
           substr($caller['function'], 0, 6) == 'assert')) {
      // We remove that call.
      array_shift($backtrace);
    }

    return _drupal_get_last_caller($backtrace);
  }

  /**
   * Check to see if a value is not false (not an empty string, 0, NULL, or FALSE).
   *
   * @param $value
   *   The value on which the assertion is to be done.
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertTrue($value, $message = '', $group = 'Other') {
    return $this-&gt;assert((bool) $value, $message ? $message : t('Value @value is TRUE.', array('@value' =&gt; var_export($value, TRUE))), $group);
  }

  /**
   * Check to see if a value is false (an empty string, 0, NULL, or FALSE).
   *
   * @param $value
   *   The value on which the assertion is to be done.
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertFalse($value, $message = '', $group = 'Other') {
    return $this-&gt;assert(!$value, $message ? $message : t('Value @value is FALSE.', array('@value' =&gt; var_export($value, TRUE))), $group);
  }

  /**
   * Check to see if a value is NULL.
   *
   * @param $value
   *   The value on which the assertion is to be done.
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertNull($value, $message = '', $group = 'Other') {
    return $this-&gt;assert(!isset($value), $message ? $message : t('Value @value is NULL.', array('@value' =&gt; var_export($value, TRUE))), $group);
  }

  /**
   * Check to see if a value is not NULL.
   *
   * @param $value
   *   The value on which the assertion is to be done.
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertNotNull($value, $message = '', $group = 'Other') {
    return $this-&gt;assert(isset($value), $message ? $message : t('Value @value is not NULL.', array('@value' =&gt; var_export($value, TRUE))), $group);
  }

  /**
   * Check to see if two values are equal.
   *
   * @param $first
   *   The first value to check.
   * @param $second
   *   The second value to check.
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertEqual($first, $second, $message = '', $group = 'Other') {
    return $this-&gt;assert($first == $second, $message ? $message : t('Value @first is equal to value @second.', array('@first' =&gt; var_export($first, TRUE), '@second' =&gt; var_export($second, TRUE))), $group);
  }

  /**
   * Check to see if two values are not equal.
   *
   * @param $first
   *   The first value to check.
   * @param $second
   *   The second value to check.
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertNotEqual($first, $second, $message = '', $group = 'Other') {
    return $this-&gt;assert($first != $second, $message ? $message : t('Value @first is not equal to value @second.', array('@first' =&gt; var_export($first, TRUE), '@second' =&gt; var_export($second, TRUE))), $group);
  }

  /**
   * Check to see if two values are identical.
   *
   * @param $first
   *   The first value to check.
   * @param $second
   *   The second value to check.
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertIdentical($first, $second, $message = '', $group = 'Other') {
    return $this-&gt;assert($first === $second, $message ? $message : t('Value @first is identical to value @second.', array('@first' =&gt; var_export($first, TRUE), '@second' =&gt; var_export($second, TRUE))), $group);
  }

  /**
   * Check to see if two values are not identical.
   *
   * @param $first
   *   The first value to check.
   * @param $second
   *   The second value to check.
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertNotIdentical($first, $second, $message = '', $group = 'Other') {
    return $this-&gt;assert($first !== $second, $message ? $message : t('Value @first is not identical to value @second.', array('@first' =&gt; var_export($first, TRUE), '@second' =&gt; var_export($second, TRUE))), $group);
  }

  /**
   * Fire an assertion that is always positive.
   *
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @return
   *   TRUE.
   */
  protected function pass($message = NULL, $group = 'Other') {
    return $this-&gt;assert(TRUE, $message, $group);
  }

  /**
   * Fire an assertion that is always negative.
   *
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @return
   *   FALSE.
   */
  protected function fail($message = NULL, $group = 'Other') {
    return $this-&gt;assert(FALSE, $message, $group);
  }

  /**
   * Fire an error assertion.
   *
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @param $caller
   *   The caller of the error.
   * @return
   *   FALSE.
   */
  protected function error($message = '', $group = 'Other', array $caller = NULL) {
    if ($group == 'User notice') {
      // Since 'User notice' is set by trigger_error() which is used for debug
      // set the message to a status of 'debug'.
      return $this-&gt;assert('debug', $message, 'Debug', $caller);
    }

    return $this-&gt;assert('exception', $message, $group, $caller);
  }

  /**
   * Logs verbose message in a text file.
   *
   * The a link to the vebose message will be placed in the test results via
   * as a passing assertion with the text '[verbose message]'.
   *
   * @param $message
   *   The verbose message to be stored.
   *
   * @see simpletest_verbose()
   */
  protected function verbose($message) {
    if ($id = simpletest_verbose($message)) {
</codefragment>
  </duplication>
  <duplication lines="176" tokens="251">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="553"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="519"/>
    <codefragment>      $backtrace = debug_backtrace();
      $this-&gt;error($message, $error_map[$severity], _drupal_get_last_caller($backtrace));
    }
    return TRUE;
  }

  /**
   * Handle exceptions.
   *
   * @see set_exception_handler
   */
  protected function exceptionHandler($exception) {
    $backtrace = $exception-&gt;getTrace();
    // Push on top of the backtrace the call that generated the exception.
    array_unshift($backtrace, array(
      'line' =&gt; $exception-&gt;getLine(),
      'file' =&gt; $exception-&gt;getFile(),
    ));
    require_once DRUPAL_ROOT . '/includes/errors.inc';
    // The exception message is run through check_plain() by _drupal_decode_exception().
    $this-&gt;error(t('%type: !message in %function (line %line of %file).', _drupal_decode_exception($exception)), 'Uncaught exception', _drupal_get_last_caller($backtrace));
  }

  /**
   * Generates a random string of ASCII characters of codes 32 to 126.
   *
   * The generated string includes alpha-numeric characters and common
   * miscellaneous characters. Use this method when testing general input
   * where the content is not restricted.
   *
   * Do not use this method when special characters are not possible (e.g., in
   * machine or file names that have already been validated); instead,
   * use DrupalWebTestCase::randomName().
   *
   * @param $length
   *   Length of random string to generate.
   *
   * @return
   *   Randomly generated string.
   *
   * @see DrupalWebTestCase::randomName()
   */
  public static function randomString($length = 8) {
    $str = '';
    for ($i = 0; $i &lt; $length; $i++) {
      $str .= chr(mt_rand(32, 126));
    }
    return $str;
  }

  /**
   * Generates a random string containing letters and numbers.
   *
   * The string will always start with a letter. The letters may be upper or
   * lower case. This method is better for restricted inputs that do not
   * accept certain characters. For example, when testing input fields that
   * require machine readable values (i.e. without spaces and non-standard
   * characters) this method is best.
   *
   * Do not use this method when testing unvalidated user input. Instead, use
   * DrupalWebTestCase::randomString().
   *
   * @param $length
   *   Length of random string to generate.
   *
   * @return
   *   Randomly generated string.
   *
   * @see DrupalWebTestCase::randomString()
   */
  public static function randomName($length = 8) {
    $values = array_merge(range(65, 90), range(97, 122), range(48, 57));
    $max = count($values) - 1;
    $str = chr(mt_rand(97, 122));
    for ($i = 1; $i &lt; $length; $i++) {
      $str .= chr($values[mt_rand(0, $max)]);
    }
    return $str;
  }

  /**
   * Converts a list of possible parameters into a stack of permutations.
   *
   * Takes a list of parameters containing possible values, and converts all of
   * them into a list of items containing every possible permutation.
   *
   * Example:
   * @code
   * $parameters = array(
   *   'one' =&gt; array(0, 1),
   *   'two' =&gt; array(2, 3),
   * );
   * $permutations = DrupalTestCase::generatePermutations($parameters)
   * // Result:
   * $permutations == array(
   *   array('one' =&gt; 0, 'two' =&gt; 2),
   *   array('one' =&gt; 1, 'two' =&gt; 2),
   *   array('one' =&gt; 0, 'two' =&gt; 3),
   *   array('one' =&gt; 1, 'two' =&gt; 3),
   * )
   * @endcode
   *
   * @param $parameters
   *   An associative array of parameters, keyed by parameter name, and whose
   *   values are arrays of parameter values.
   *
   * @return
   *   A list of permutations, which is an array of arrays. Each inner array
   *   contains the full list of parameters that have been passed, but with a
   *   single value only.
   */
  public static function generatePermutations($parameters) {
    $all_permutations = array(array());
    foreach ($parameters as $parameter =&gt; $values) {
      $new_permutations = array();
      // Iterate over all values of the parameter.
      foreach ($values as $value) {
        // Iterate over all existing permutations.
        foreach ($all_permutations as $permutation) {
          // Add the new parameter value to existing permutations.
          $new_permutations[] = $permutation + array($parameter =&gt; $value);
        }
      }
      // Replace the old permutations with the new permutations.
      $all_permutations = $new_permutations;
    }
    return $all_permutations;
  }
}

/**
 * Test case for Drupal unit tests.
 *
 * These tests can not access the database nor files. Calling any Drupal
 * function that needs the database will throw exceptions. These include
 * watchdog(), module_implements(), module_invoke_all() etc.
 */
class DrupalUnitTestCase extends DrupalTestCase {

  /**
   * Constructor for DrupalUnitTestCase.
   */
  function __construct($test_id = NULL) {
    parent::__construct($test_id);
    $this-&gt;skipClasses[__CLASS__] = TRUE;
  }

  /**
   * Sets up unit test environment.
   *
   * Unlike DrupalWebTestCase::setUp(), DrupalUnitTestCase::setUp() does not
   * install modules because tests are performed without accessing the database.
   * Any required files must be explicitly included by the child class setUp()
   * method.
   */
  protected function setUp() {
    global $conf;

    // Store necessary current values before switching to the test environment.
    $this-&gt;originalFileDirectory = variable_get('file_public_path', conf_path() . '/files');

    // Reset all statics so that test is performed with a clean environment.
    drupal_static_reset();

    // Generate temporary prefixed database to ensure that tests have a clean starting point.
    $this-&gt;databasePrefix = Database::getConnection()-&gt;prefixTables('{simpletest' . mt_rand(1000, 1000000) . '}');

    // Create test directory.
    $public_files_directory = $this-&gt;originalFileDirectory . '/simpletest/' . substr($this-&gt;databasePrefix, 10);
    file_prepare_directory($public_files_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $conf['file_public_path'] = $public_files_directory;

    // Clone the current connection and replace the current prefix.
    $connection_info = Database::getConnectionInfo('default');
    Database::renameConnection('default', 'simpletest_original_default');
    foreach ($connection_info as $target =&gt; $value) {
</codefragment>
  </duplication>
  <duplication lines="362" tokens="500">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="753"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="701"/>
    <codefragment>  protected function tearDown() {
    global $conf;

    // Get back to the original connection.
    Database::removeConnection('default');
    Database::renameConnection('simpletest_original_default', 'default');

    $conf['file_public_path'] = $this-&gt;originalFileDirectory;
    // Restore modules if necessary.
    if (isset($this-&gt;originalModuleList)) {
      module_list(TRUE, FALSE, FALSE, $this-&gt;originalModuleList);
    }
  }
}

/**
 * Test case for typical Drupal tests.
 */
class DrupalWebTestCase extends DrupalTestCase {
  /**
   * The profile to install as a basis for testing.
   *
   * @var string
   */
  protected $profile = 'standard';

  /**
   * The URL currently loaded in the internal browser.
   *
   * @var string
   */
  protected $url;

  /**
   * The handle of the current cURL connection.
   *
   * @var resource
   */
  protected $curlHandle;

  /**
   * The headers of the page currently loaded in the internal browser.
   *
   * @var Array
   */
  protected $headers;

  /**
   * The content of the page currently loaded in the internal browser.
   *
   * @var string
   */
  protected $content;

  /**
   * The content of the page currently loaded in the internal browser (plain text version).
   *
   * @var string
   */
  protected $plainTextContent;

  /**
   * The value of the Drupal.settings JavaScript variable for the page currently loaded in the internal browser.
   *
   * @var Array
   */
  protected $drupalSettings;

  /**
   * The parsed version of the page.
   *
   * @var SimpleXMLElement
   */
  protected $elements = NULL;

  /**
   * The current user logged in using the internal browser.
   *
   * @var bool
   */
  protected $loggedInUser = FALSE;

  /**
   * The current cookie file used by cURL.
   *
   * We do not reuse the cookies in further runs, so we do not need a file
   * but we still need cookie handling, so we set the jar to NULL.
   */
  protected $cookieFile = NULL;

  /**
   * Additional cURL options.
   *
   * DrupalWebTestCase itself never sets this but always obeys what is set.
   */
  protected $additionalCurlOptions = array();

  /**
   * The original user, before it was changed to a clean uid = 1 for testing purposes.
   *
   * @var object
   */
  protected $originalUser = NULL;

  /**
   * The original shutdown handlers array, before it was cleaned for testing purposes.
   *
   * @var array
   */
  protected $originalShutdownCallbacks = array();

  /**
   * HTTP authentication method
   */
  protected $httpauth_method = CURLAUTH_BASIC;

  /**
   * HTTP authentication credentials (&lt;username&gt;:&lt;password&gt;).
   */
  protected $httpauth_credentials = NULL;

  /**
   * The current session name, if available.
   */
  protected $session_name = NULL;

  /**
   * The current session ID, if available.
   */
  protected $session_id = NULL;

  /**
   * Whether the files were copied to the test files directory.
   */
  protected $generatedTestFiles = FALSE;

  /**
   * The number of redirects followed during the handling of a request.
   */
  protected $redirect_count;

  /**
   * Constructor for DrupalWebTestCase.
   */
  function __construct($test_id = NULL) {
    parent::__construct($test_id);
    $this-&gt;skipClasses[__CLASS__] = TRUE;
  }

  /**
   * Get a node from the database based on its title.
   *
   * @param $title
   *   A node title, usually generated by $this-&gt;randomName().
   * @param $reset
   *   (optional) Whether to reset the internal node_load() cache.
   *
   * @return
   *   A node object matching $title.
   */
  function drupalGetNodeByTitle($title, $reset = FALSE) {
    $nodes = node_load_multiple(array(), array('title' =&gt; $title), $reset);
    // Load the first node returned from the database.
    $returned_node = reset($nodes);
    return $returned_node;
  }

  /**
   * Creates a node based on default settings.
   *
   * @param $settings
   *   An associative array of settings to change from the defaults, keys are
   *   node properties, for example 'title' =&gt; 'Hello, world!'.
   * @return
   *   Created node object.
   */
  protected function drupalCreateNode($settings = array()) {
    // Populate defaults array.
    $settings += array(
      'body'      =&gt; array(LANGUAGE_NONE =&gt; array(array())),
      'title'     =&gt; $this-&gt;randomName(8),
      'comment'   =&gt; 2,
      'changed'   =&gt; REQUEST_TIME,
      'moderate'  =&gt; 0,
      'promote'   =&gt; 0,
      'revision'  =&gt; 1,
      'log'       =&gt; '',
      'status'    =&gt; 1,
      'sticky'    =&gt; 0,
      'type'      =&gt; 'page',
      'revisions' =&gt; NULL,
      'language'  =&gt; LANGUAGE_NONE,
    );

    // Use the original node's created time for existing nodes.
    if (isset($settings['created']) &amp;&amp; !isset($settings['date'])) {
      $settings['date'] = format_date($settings['created'], 'custom', 'Y-m-d H:i:s O');
    }

    // If the node's user uid is not specified manually, use the currently
    // logged in user if available, or else the user running the test.
    if (!isset($settings['uid'])) {
      if ($this-&gt;loggedInUser) {
        $settings['uid'] = $this-&gt;loggedInUser-&gt;uid;
      }
      else {
        global $user;
        $settings['uid'] = $user-&gt;uid;
      }
    }

    // Merge body field value and format separately.
    $body = array(
      'value' =&gt; $this-&gt;randomName(32),
      'format' =&gt; filter_default_format(),
    );
    $settings['body'][$settings['language']][0] += $body;

    $node = (object) $settings;
    node_save($node);

    // Small hack to link revisions to our test user.
    db_update('node_revision')
      -&gt;fields(array('uid' =&gt; $node-&gt;uid))
      -&gt;condition('vid', $node-&gt;vid)
      -&gt;execute();
    return $node;
  }

  /**
   * Creates a custom content type based on default settings.
   *
   * @param $settings
   *   An array of settings to change from the defaults.
   *   Example: 'type' =&gt; 'foo'.
   * @return
   *   Created content type.
   */
  protected function drupalCreateContentType($settings = array()) {
    // Find a non-existent random type name.
    do {
      $name = strtolower($this-&gt;randomName(8));
    } while (node_type_get_type($name));

    // Populate defaults array.
    $defaults = array(
      'type' =&gt; $name,
      'name' =&gt; $name,
      'base' =&gt; 'node_content',
      'description' =&gt; '',
      'help' =&gt; '',
      'title_label' =&gt; 'Title',
      'body_label' =&gt; 'Body',
      'has_title' =&gt; 1,
      'has_body' =&gt; 1,
    );
    // Imposed values for a custom type.
    $forced = array(
      'orig_type' =&gt; '',
      'old_type' =&gt; '',
      'module' =&gt; 'node',
      'custom' =&gt; 1,
      'modified' =&gt; 1,
      'locked' =&gt; 0,
    );
    $type = $forced + $settings + $defaults;
    $type = (object) $type;

    $saved_type = node_type_save($type);
    node_types_rebuild();
    menu_rebuild();
    node_add_body_field($type);

    $this-&gt;assertEqual($saved_type, SAVED_NEW, t('Created content type %type.', array('%type' =&gt; $type-&gt;type)));

    // Reset permissions so that permissions for this content type are available.
    $this-&gt;checkPermissions(array(), TRUE);

    return $type;
  }

  /**
   * Get a list files that can be used in tests.
   *
   * @param $type
   *   File type, possible values: 'binary', 'html', 'image', 'javascript', 'php', 'sql', 'text'.
   * @param $size
   *   File size in bytes to match. Please check the tests/files folder.
   * @return
   *   List of files that match filter.
   */
  protected function drupalGetTestFiles($type, $size = NULL) {
    if (empty($this-&gt;generatedTestFiles)) {
      // Generate binary test files.
      $lines = array(64, 1024);
      $count = 0;
      foreach ($lines as $line) {
        simpletest_generate_file('binary-' . $count++, 64, $line, 'binary');
      }

      // Generate text test files.
      $lines = array(16, 256, 1024, 2048, 20480);
      $count = 0;
      foreach ($lines as $line) {
        simpletest_generate_file('text-' . $count++, 64, $line);
      }

      // Copy other test files from simpletest.
      $original = drupal_get_path('module', 'simpletest') . '/files';
      $files = file_scan_directory($original, '/(html|image|javascript|php|sql)-.*/');
      foreach ($files as $file) {
        file_unmanaged_copy($file-&gt;uri, variable_get('file_public_path', conf_path() . '/files'));
      }

      $this-&gt;generatedTestFiles = TRUE;
    }

    $files = array();
    // Make sure type is valid.
    if (in_array($type, array('binary', 'html', 'image', 'javascript', 'php', 'sql', 'text'))) {
      $files = file_scan_directory('public://', '/' . $type . '\-.*/');

      // If size is set then remove any files that are not of that size.
      if ($size !== NULL) {
        foreach ($files as $file) {
          $stats = stat($file-&gt;uri);
          if ($stats['size'] != $size) {
            unset($files[$file-&gt;uri]);
          }
        }
      }
    }
    usort($files, array($this, 'drupalCompareFiles'));
    return $files;
  }

  /**
   * Compare two files based on size and file name.
   */
  protected function drupalCompareFiles($file1, $file2) {
    $compare_size = filesize($file1-&gt;uri) - filesize($file2-&gt;uri);
    if ($compare_size) {
      // Sort by file size.
      return $compare_size;
    }
    else {
      // The files were the same size, so sort alphabetically.
      return strnatcmp($file1-&gt;name, $file2-&gt;name);
    }
  }

  /**
   * Create a user with a given set of permissions.
   *
   * @param array $permissions
   *   Array of permission names to assign to user. Note that the user always
   *   has the default permissions derived from the "authenticated users" role.
   *
   * @return object|false
   *   A fully loaded user object with pass_raw property, or FALSE if account
   *   creation fails.
   */
</codefragment>
  </duplication>
  <duplication lines="105" tokens="188">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="1135"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="1076"/>
    <codefragment>    $account = user_save(drupal_anonymous_user(), $edit);

    $this-&gt;assertTrue(!empty($account-&gt;uid), t('User created with name %name and pass %pass', array('%name' =&gt; $edit['name'], '%pass' =&gt; $edit['pass'])), t('User login'));
    if (empty($account-&gt;uid)) {
      return FALSE;
    }

    // Add the raw password so that we can log in as this user.
    $account-&gt;pass_raw = $edit['pass'];
    return $account;
  }

  /**
   * Creates a role with specified permissions.
   *
   * @param $permissions
   *   Array of permission names to assign to role.
   * @param $name
   *   (optional) String for the name of the role.  Defaults to a random string.
   * @return
   *   Role ID of newly created role, or FALSE if role creation failed.
   */
  protected function drupalCreateRole(array $permissions, $name = NULL) {
    // Generate random name if it was not passed.
    if (!$name) {
      $name = $this-&gt;randomName();
    }

    // Check the all the permissions strings are valid.
    if (!$this-&gt;checkPermissions($permissions)) {
      return FALSE;
    }

    // Create new role.
    $role = new stdClass();
    $role-&gt;name = $name;
    user_role_save($role);
    user_role_grant_permissions($role-&gt;rid, $permissions);

    $this-&gt;assertTrue(isset($role-&gt;rid), t('Created role of name: @name, id: @rid', array('@name' =&gt; $name, '@rid' =&gt; (isset($role-&gt;rid) ? $role-&gt;rid : t('-n/a-')))), t('Role'));
    if ($role &amp;&amp; !empty($role-&gt;rid)) {
      $count = db_query('SELECT COUNT(*) FROM {role_permission} WHERE rid = :rid', array(':rid' =&gt; $role-&gt;rid))-&gt;fetchField();
      $this-&gt;assertTrue($count == count($permissions), t('Created permissions: @perms', array('@perms' =&gt; implode(', ', $permissions))), t('Role'));
      return $role-&gt;rid;
    }
    else {
      return FALSE;
    }
  }

  /**
   * Check to make sure that the array of permissions are valid.
   *
   * @param $permissions
   *   Permissions to check.
   * @param $reset
   *   Reset cached available permissions.
   * @return
   *   TRUE or FALSE depending on whether the permissions are valid.
   */
  protected function checkPermissions(array $permissions, $reset = FALSE) {
    $available = &amp;drupal_static(__FUNCTION__);

    if (!isset($available) || $reset) {
      $available = array_keys(module_invoke_all('permission'));
    }

    $valid = TRUE;
    foreach ($permissions as $permission) {
      if (!in_array($permission, $available)) {
        $this-&gt;fail(t('Invalid permission %permission.', array('%permission' =&gt; $permission)), t('Role'));
        $valid = FALSE;
      }
    }
    return $valid;
  }

  /**
   * Log in a user with the internal browser.
   *
   * If a user is already logged in, then the current user is logged out before
   * logging in the specified user.
   *
   * Please note that neither the global $user nor the passed-in user object is
   * populated with data of the logged in user. If you need full access to the
   * user object after logging in, it must be updated manually. If you also need
   * access to the plain-text password of the user (set by drupalCreateUser()),
   * e.g. to log in the same user again, then it must be re-assigned manually.
   * For example:
   * @code
   *   // Create a user.
   *   $account = $this-&gt;drupalCreateUser(array());
   *   $this-&gt;drupalLogin($account);
   *   // Load real user object.
   *   $pass_raw = $account-&gt;pass_raw;
   *   $account = user_load($account-&gt;uid);
   *   $account-&gt;pass_raw = $pass_raw;
   * @endcode
   *
   * @param $account
   *   User object representing the user to log in.
   *
   * @see drupalCreateUser()
   */
  protected function drupalLogin(stdClass $account) {
</codefragment>
  </duplication>
  <duplication lines="92" tokens="135">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="1538"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="1406"/>
    <codefragment>  protected function preloadRegistry() {
    // Use two separate queries, each with their own connections: copy the
    // {registry} and {registry_file} tables over from the parent installation
    // to the child installation.
    $original_connection = Database::getConnection('default', 'simpletest_original_default');
    $test_connection = Database::getConnection();

    foreach (array('registry', 'registry_file') as $table) {
      // Find the records from the parent database.
      $source_query = $original_connection
        -&gt;select($table, array(), array('fetch' =&gt; PDO::FETCH_ASSOC))
        -&gt;fields($table);

      $dest_query = $test_connection-&gt;insert($table);

      $first = TRUE;
      foreach ($source_query-&gt;execute() as $row) {
        if ($first) {
          $dest_query-&gt;fields(array_keys($row));
          $first = FALSE;
        }
        // Insert the records into the child database.
        $dest_query-&gt;values($row);
      }

      $dest_query-&gt;execute();
    }
  }

  /**
   * Reset all data structures after having enabled new modules.
   *
   * This method is called by DrupalWebTestCase::setUp() after enabling
   * the requested modules. It must be called again when additional modules
   * are enabled later.
   */
  protected function resetAll() {
    // Reset all static variables.
    drupal_static_reset();
    // Reset the list of enabled modules.
    module_list(TRUE);

    // Reset cached schema for new database prefix. This must be done before
    // drupal_flush_all_caches() so rebuilds can make use of the schema of
    // modules enabled on the cURL side.
    drupal_get_schema(NULL, TRUE);

    // Perform rebuilds and flush remaining caches.
    drupal_flush_all_caches();

    // Reload global $conf array and permissions.
    $this-&gt;refreshVariables();
    $this-&gt;checkPermissions(array(), TRUE);
  }

  /**
   * Refresh the in-memory set of variables. Useful after a page request is made
   * that changes a variable in a different thread.
   *
   * In other words calling a settings page with $this-&gt;drupalPost() with a changed
   * value would update a variable to reflect that change, but in the thread that
   * made the call (thread running the test) the changed variable would not be
   * picked up.
   *
   * This method clears the variables cache and loads a fresh copy from the database
   * to ensure that the most up-to-date set of variables is loaded.
   */
  protected function refreshVariables() {
    global $conf;
    cache_clear_all('variables', 'cache_bootstrap');
    $conf = variable_initialize();
  }

  /**
   * Delete created files and temporary files directory, delete the tables created by setUp(),
   * and reset the database prefix.
   */
  protected function tearDown() {
    global $user, $language;

    // In case a fatal error occurred that was not in the test process read the
    // log to pick up any fatal errors.
    simpletest_log_read($this-&gt;testId, $this-&gt;databasePrefix, get_class($this), TRUE);

    $emailCount = count(variable_get('drupal_test_email_collector', array()));
    if ($emailCount) {
      $message = format_plural($emailCount, '1 e-mail was sent during this test.', '@count e-mails were sent during this test.');
      $this-&gt;pass($message, t('E-mail'));
    }

    // Delete temporary files directory.
    file_unmanaged_delete_recursive($this-&gt;originalFileDirectory . '/simpletest/' . substr($this-&gt;databasePrefix, 10));
</codefragment>
  </duplication>
  <duplication lines="98" tokens="205">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="1731"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="1573"/>
    <codefragment>      $this-&gt;session_name = session_name();
    }
    // We set the user agent header on each request so as to use the current
    // time and a new uniqid.
    if (preg_match('/simpletest\d+/', $this-&gt;databasePrefix, $matches)) {
      curl_setopt($this-&gt;curlHandle, CURLOPT_USERAGENT, drupal_generate_test_ua($matches[0]));
    }
  }

  /**
   * Initializes and executes a cURL request.
   *
   * @param $curl_options
   *   An associative array of cURL options to set, where the keys are constants
   *   defined by the cURL library. For a list of valid options, see
   *   http://www.php.net/manual/function.curl-setopt.php
   * @param $redirect
   *   FALSE if this is an initial request, TRUE if this request is the result
   *   of a redirect.
   *
   * @return
   *   The content returned from the call to curl_exec().
   *
   * @see curlInitialize()
   */
  protected function curlExec($curl_options, $redirect = FALSE) {
    $this-&gt;curlInitialize();

    // cURL incorrectly handles URLs with a fragment by including the
    // fragment in the request to the server, causing some web servers
    // to reject the request citing "400 - Bad Request". To prevent
    // this, we strip the fragment from the request.
    // TODO: Remove this for Drupal 8, since fixed in curl 7.20.0.
    if (!empty($curl_options[CURLOPT_URL]) &amp;&amp; strpos($curl_options[CURLOPT_URL], '#')) {
      $original_url = $curl_options[CURLOPT_URL];
      $curl_options[CURLOPT_URL] = strtok($curl_options[CURLOPT_URL], '#');
    }

    $url = empty($curl_options[CURLOPT_URL]) ? curl_getinfo($this-&gt;curlHandle, CURLINFO_EFFECTIVE_URL) : $curl_options[CURLOPT_URL];

    if (!empty($curl_options[CURLOPT_POST])) {
      // This is a fix for the Curl library to prevent Expect: 100-continue
      // headers in POST requests, that may cause unexpected HTTP response
      // codes from some webservers (like lighttpd that returns a 417 error
      // code). It is done by setting an empty "Expect" header field that is
      // not overwritten by Curl.
      $curl_options[CURLOPT_HTTPHEADER][] = 'Expect:';
    }
    curl_setopt_array($this-&gt;curlHandle, $this-&gt;additionalCurlOptions + $curl_options);

    if (!$redirect) {
      // Reset headers, the session ID and the redirect counter.
      $this-&gt;session_id = NULL;
      $this-&gt;headers = array();
      $this-&gt;redirect_count = 0;
    }

    $content = curl_exec($this-&gt;curlHandle);
    $status = curl_getinfo($this-&gt;curlHandle, CURLINFO_HTTP_CODE);

    // cURL incorrectly handles URLs with fragments, so instead of
    // letting cURL handle redirects we take of them ourselves to
    // to prevent fragments being sent to the web server as part
    // of the request.
    // TODO: Remove this for Drupal 8, since fixed in curl 7.20.0.
    if (in_array($status, array(300, 301, 302, 303, 305, 307)) &amp;&amp; $this-&gt;redirect_count &lt; variable_get('simpletest_maximum_redirects', 5)) {
      if ($this-&gt;drupalGetHeader('location')) {
        $this-&gt;redirect_count++;
        $curl_options = array();
        $curl_options[CURLOPT_URL] = $this-&gt;drupalGetHeader('location');
        $curl_options[CURLOPT_HTTPGET] = TRUE;
        return $this-&gt;curlExec($curl_options, TRUE);
      }
    }

    $this-&gt;drupalSetContent($content, isset($original_url) ? $original_url : curl_getinfo($this-&gt;curlHandle, CURLINFO_EFFECTIVE_URL));
    $message_vars = array(
      '!method' =&gt; !empty($curl_options[CURLOPT_NOBODY]) ? 'HEAD' : (empty($curl_options[CURLOPT_POSTFIELDS]) ? 'GET' : 'POST'),
      '@url' =&gt; isset($original_url) ? $original_url : $url,
      '@status' =&gt; $status,
      '!length' =&gt; format_size(strlen($this-&gt;drupalGetContent()))
    );
    $message = t('!method @url returned @status (!length).', $message_vars);
    $this-&gt;assertTrue($this-&gt;drupalGetContent() !== FALSE, $message, t('Browser'));
    return $this-&gt;drupalGetContent();
  }

  /**
   * Reads headers and registers errors received from the tested site.
   *
   * @see _drupal_log_error().
   *
   * @param $curlHandler
   *   The cURL handler.
   * @param $header
   *   An header.
   */
  protected function curlHeaderCallback($curlHandler, $header) {
</codefragment>
  </duplication>
  <duplication lines="220" tokens="333">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="1837"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="1671"/>
    <codefragment>      $this-&gt;headers[] = $header;
    }

    // Errors are being sent via X-Drupal-Assertion-* headers,
    // generated by _drupal_log_error() in the exact form required
    // by DrupalWebTestCase::error().
    if (preg_match('/^X-Drupal-Assertion-[0-9]+: (.*)$/', $header, $matches)) {
      // Call DrupalWebTestCase::error() with the parameters from the header.
      call_user_func_array(array(&amp;$this, 'error'), unserialize(urldecode($matches[1])));
    }

    // Save cookies.
    if (preg_match('/^Set-Cookie: ([^=]+)=(.+)/', $header, $matches)) {
      $name = $matches[1];
      $parts = array_map('trim', explode(';', $matches[2]));
      $value = array_shift($parts);
      $this-&gt;cookies[$name] = array('value' =&gt; $value, 'secure' =&gt; in_array('secure', $parts));
      if ($name == $this-&gt;session_name) {
        if ($value != 'deleted') {
          $this-&gt;session_id = $value;
        }
        else {
          $this-&gt;session_id = NULL;
        }
      }
    }

    // This is required by cURL.
    return strlen($header);
  }

  /**
   * Close the cURL handler and unset the handler.
   */
  protected function curlClose() {
    if (isset($this-&gt;curlHandle)) {
      curl_close($this-&gt;curlHandle);
      unset($this-&gt;curlHandle);
    }
  }

  /**
   * Parse content returned from curlExec using DOM and SimpleXML.
   *
   * @return
   *   A SimpleXMLElement or FALSE on failure.
   */
  protected function parse() {
    if (!$this-&gt;elements) {
      // DOM can load HTML soup. But, HTML soup can throw warnings, suppress
      // them.
      $htmlDom = new DOMDocument();
      @$htmlDom-&gt;loadHTML($this-&gt;drupalGetContent());
      if ($htmlDom) {
        $this-&gt;pass(t('Valid HTML found on "@path"', array('@path' =&gt; $this-&gt;getUrl())), t('Browser'));
        // It's much easier to work with simplexml than DOM, luckily enough
        // we can just simply import our DOM tree.
        $this-&gt;elements = simplexml_import_dom($htmlDom);
      }
    }
    if (!$this-&gt;elements) {
      $this-&gt;fail(t('Parsed page successfully.'), t('Browser'));
    }

    return $this-&gt;elements;
  }

  /**
   * Retrieves a Drupal path or an absolute path.
   *
   * @param $path
   *   Drupal path or URL to load into internal browser
   * @param $options
   *   Options to be forwarded to url().
   * @param $headers
   *   An array containing additional HTTP request headers, each formatted as
   *   "name: value".
   * @return
   *   The retrieved HTML string, also available as $this-&gt;drupalGetContent()
   */
  protected function drupalGet($path, array $options = array(), array $headers = array()) {
    $options['absolute'] = TRUE;

    // We re-using a CURL connection here. If that connection still has certain
    // options set, it might change the GET into a POST. Make sure we clear out
    // previous options.
    $out = $this-&gt;curlExec(array(CURLOPT_HTTPGET =&gt; TRUE, CURLOPT_URL =&gt; url($path, $options), CURLOPT_NOBODY =&gt; FALSE, CURLOPT_HTTPHEADER =&gt; $headers));
    $this-&gt;refreshVariables(); // Ensure that any changes to variables in the other thread are picked up.

    // Replace original page output with new output from redirected page(s).
    if ($new = $this-&gt;checkForMetaRefresh()) {
      $out = $new;
    }
    $this-&gt;verbose('GET request to: ' . $path .
                   '&lt;hr /&gt;Ending URL: ' . $this-&gt;getUrl() .
                   '&lt;hr /&gt;' . $out);
    return $out;
  }

  /**
   * Retrieve a Drupal path or an absolute path and JSON decode the result.
   */
  protected function drupalGetAJAX($path, array $options = array(), array $headers = array()) {
    return drupal_json_decode($this-&gt;drupalGet($path, $options, $headers));
  }

  /**
   * Execute a POST request on a Drupal page.
   * It will be done as usual POST request with SimpleBrowser.
   *
   * @param $path
   *   Location of the post form. Either a Drupal path or an absolute path or
   *   NULL to post to the current page. For multi-stage forms you can set the
   *   path to NULL and have it post to the last received page. Example:
   *
   *   @code
   *   // First step in form.
   *   $edit = array(...);
   *   $this-&gt;drupalPost('some_url', $edit, t('Save'));
   *
   *   // Second step in form.
   *   $edit = array(...);
   *   $this-&gt;drupalPost(NULL, $edit, t('Save'));
   *   @endcode
   * @param  $edit
   *   Field data in an associative array. Changes the current input fields
   *   (where possible) to the values indicated. A checkbox can be set to
   *   TRUE to be checked and FALSE to be unchecked. Note that when a form
   *   contains file upload fields, other fields cannot start with the '@'
   *   character.
   *
   *   Multiple select fields can be set using name[] and setting each of the
   *   possible values. Example:
   *   @code
   *   $edit = array();
   *   $edit['name[]'] = array('value1', 'value2');
   *   @endcode
   * @param $submit
   *   Value of the submit button whose click is to be emulated. For example,
   *   t('Save'). The processing of the request depends on this value. For
   *   example, a form may have one button with the value t('Save') and another
   *   button with the value t('Delete'), and execute different code depending
   *   on which one is clicked.
   *
   *   This function can also be called to emulate an Ajax submission. In this
   *   case, this value needs to be an array with the following keys:
   *   - path: A path to submit the form values to for Ajax-specific processing,
   *     which is likely different than the $path parameter used for retrieving
   *     the initial form. Defaults to 'system/ajax'.
   *   - triggering_element: If the value for the 'path' key is 'system/ajax' or
   *     another generic Ajax processing path, this needs to be set to the name
   *     of the element. If the name doesn't identify the element uniquely, then
   *     this should instead be an array with a single key/value pair,
   *     corresponding to the element name and value. The callback for the
   *     generic Ajax processing path uses this to find the #ajax information
   *     for the element, including which specific callback to use for
   *     processing the request.
   *
   *   This can also be set to NULL in order to emulate an Internet Explorer
   *   submission of a form with a single text field, and pressing ENTER in that
   *   textfield: under these conditions, no button information is added to the
   *   POST data.
   * @param $options
   *   Options to be forwarded to url().
   * @param $headers
   *   An array containing additional HTTP request headers, each formatted as
   *   "name: value".
   * @param $form_html_id
   *   (optional) HTML ID of the form to be submitted. On some pages
   *   there are many identical forms, so just using the value of the submit
   *   button is not enough. For example: 'trigger-node-presave-assign-form'.
   *   Note that this is not the Drupal $form_id, but rather the HTML ID of the
   *   form, which is typically the same thing but with hyphens replacing the
   *   underscores.
   * @param $extra_post
   *   (optional) A string of additional data to append to the POST submission.
   *   This can be used to add POST data for which there are no HTML fields, as
   *   is done by drupalPostAJAX(). This string is literally appended to the
   *   POST data, so it must already be urlencoded and contain a leading "&amp;"
   *   (e.g., "&amp;extra_var1=hello+world&amp;extra_var2=you%26me").
   */
  protected function drupalPost($path, $edit, $submit, array $options = array(), array $headers = array(), $form_html_id = NULL, $extra_post = NULL) {
    $submit_matches = FALSE;
    $ajax = is_array($submit);
    if (isset($path)) {
      $this-&gt;drupalGet($path, $options);
    }
    if ($this-&gt;parse()) {
      $edit_save = $edit;
      // Let's iterate over all the forms.
      $xpath = "//form";
      if (!empty($form_html_id)) {
        $xpath .= "[@id='" . $form_html_id . "']";
      }
      $forms = $this-&gt;xpath($xpath);
      foreach ($forms as $form) {
        // We try to set the fields of this form as specified in $edit.
        $edit = $edit_save;
        $post = array();
        $upload = array();
        $submit_matches = $this-&gt;handleForm($post, $edit, $upload, $ajax ? NULL : $submit, $form);
        $action = isset($form['action']) ? $this-&gt;getAbsoluteUrl((string) $form['action']) : $this-&gt;getUrl();
        if ($ajax) {
          $action = $this-&gt;getAbsoluteUrl(!empty($submit['path']) ? $submit['path'] : 'system/ajax');
          // Ajax callbacks verify the triggering element if necessary, so while
          // we may eventually want extra code that verifies it in the
          // handleForm() function, it's not currently a requirement.
          $submit_matches = TRUE;
        }

        // We post only if we managed to handle every field in edit and the
        // submit button matches.
        if (!$edit &amp;&amp; ($submit_matches || !isset($submit))) {
          $post_array = $post;
          if ($upload) {
            // TODO: cURL handles file uploads for us, but the implementation
            // is broken. This is a less than elegant workaround. Alternatives
            // are being explored at #253506.
            foreach ($upload as $key =&gt; $file) {
              $file = drupal_realpath($file);
</codefragment>
  </duplication>
  <duplication lines="121" tokens="229">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="2064"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="1891"/>
    <codefragment>                  $post[$key] = '@' . $file;
                }
              }
            }
          }
          else {
            foreach ($post as $key =&gt; $value) {
              // Encode according to application/x-www-form-urlencoded
              // Both names and values needs to be urlencoded, according to
              // http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1
              $post[$key] = urlencode($key) . '=' . urlencode($value);
            }
            $post = implode('&amp;', $post) . $extra_post;
          }
          $out = $this-&gt;curlExec(array(CURLOPT_URL =&gt; $action, CURLOPT_POST =&gt; TRUE, CURLOPT_POSTFIELDS =&gt; $post, CURLOPT_HTTPHEADER =&gt; $headers));
          // Ensure that any changes to variables in the other thread are picked up.
          $this-&gt;refreshVariables();

          // Replace original page output with new output from redirected page(s).
          if ($new = $this-&gt;checkForMetaRefresh()) {
            $out = $new;
          }
          $this-&gt;verbose('POST request to: ' . $path .
                         '&lt;hr /&gt;Ending URL: ' . $this-&gt;getUrl() .
                         '&lt;hr /&gt;Fields: ' . highlight_string('&lt;?php ' . var_export($post_array, TRUE), TRUE) .
                         '&lt;hr /&gt;' . $out);
          return $out;
        }
      }
      // We have not found a form which contained all fields of $edit.
      foreach ($edit as $name =&gt; $value) {
        $this-&gt;fail(t('Failed to set field @name to @value', array('@name' =&gt; $name, '@value' =&gt; $value)));
      }
      if (!$ajax &amp;&amp; isset($submit)) {
        $this-&gt;assertTrue($submit_matches, t('Found the @submit button', array('@submit' =&gt; $submit)));
      }
      $this-&gt;fail(t('Found the requested form fields at @path', array('@path' =&gt; $path)));
    }
  }

  /**
   * Execute an Ajax submission.
   *
   * This executes a POST as ajax.js does. It uses the returned JSON data, an
   * array of commands, to update $this-&gt;content using equivalent DOM
   * manipulation as is used by ajax.js. It also returns the array of commands.
   *
   * @param $path
   *   Location of the form containing the Ajax enabled element to test. Can be
   *   either a Drupal path or an absolute path or NULL to use the current page.
   * @param $edit
   *   Field data in an associative array. Changes the current input fields
   *   (where possible) to the values indicated.
   * @param $triggering_element
   *   The name of the form element that is responsible for triggering the Ajax
   *   functionality to test. May be a string or, if the triggering element is
   *   a button, an associative array where the key is the name of the button
   *   and the value is the button label. i.e.) array('op' =&gt; t('Refresh')).
   * @param $ajax_path
   *   (optional) Override the path set by the Ajax settings of the triggering
   *   element. In the absence of both the triggering element's Ajax path and
   *   $ajax_path 'system/ajax' will be used.
   * @param $options
   *   (optional) Options to be forwarded to url().
   * @param $headers
   *   (optional) An array containing additional HTTP request headers, each
   *   formatted as "name: value". Forwarded to drupalPost().
   * @param $form_html_id
   *   (optional) HTML ID of the form to be submitted, use when there is more
   *   than one identical form on the same page and the value of the triggering
   *   element is not enough to identify the form. Note this is not the Drupal
   *   ID of the form but rather the HTML ID of the form.
   * @param $ajax_settings
   *   (optional) An array of Ajax settings which if specified will be used in
   *   place of the Ajax settings of the triggering element.
   *
   * @return
   *   An array of Ajax commands.
   *
   * @see drupalPost()
   * @see ajax.js
   */
  protected function drupalPostAJAX($path, $edit, $triggering_element, $ajax_path = NULL, array $options = array(), array $headers = array(), $form_html_id = NULL, $ajax_settings = NULL) {
    // Get the content of the initial page prior to calling drupalPost(), since
    // drupalPost() replaces $this-&gt;content.
    if (isset($path)) {
      $this-&gt;drupalGet($path, $options);
    }
    $content = $this-&gt;content;
    $drupal_settings = $this-&gt;drupalSettings;

    // Get the Ajax settings bound to the triggering element.
    if (!isset($ajax_settings)) {
      if (is_array($triggering_element)) {
        $xpath = '//*[@name="' . key($triggering_element) . '" and @value="' . current($triggering_element) . '"]';
      }
      else {
        $xpath = '//*[@name="' . $triggering_element . '"]';
      }
      if (isset($form_html_id)) {
        $xpath = '//form[@id="' . $form_html_id . '"]' . $xpath;
      }
      $element = $this-&gt;xpath($xpath);
      $element_id = (string) $element[0]['id'];
      $ajax_settings = $drupal_settings['ajax'][$element_id];
    }

    // Add extra information to the POST data as ajax.js does.
    $extra_post = '';
    if (isset($ajax_settings['submit'])) {
      foreach ($ajax_settings['submit'] as $key =&gt; $value) {
        $extra_post .= '&amp;' . urlencode($key) . '=' . urlencode($value);
      }
    }
    foreach ($this-&gt;xpath('//*[@id]') as $element) {
      $id = (string) $element['id'];
      $extra_post .= '&amp;' . urlencode('ajax_html_ids[]') . '=' . urlencode($id);
    }
    if (isset($drupal_settings['ajaxPageState'])) {
      $extra_post .= '&amp;' . urlencode('ajax_page_state[theme]') . '=' . urlencode($drupal_settings['ajaxPageState']['theme']);
      $extra_post .= '&amp;' . urlencode('ajax_page_state[theme_token]') . '=' . urlencode($drupal_settings['ajaxPageState']['theme_token']);
</codefragment>
  </duplication>
  <duplication lines="43" tokens="105">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="2232"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="2046"/>
    <codefragment>              $wrapperNode = $xpath-&gt;query('//' . $command['selector'])-&gt;item(0);
            }
            if ($wrapperNode) {
              // ajax.js adds an enclosing DIV to work around a Safari bug.
              $newDom = new DOMDocument();
              $newDom-&gt;loadHTML('&lt;div&gt;' . $command['data'] . '&lt;/div&gt;');
              $newNode = $dom-&gt;importNode($newDom-&gt;documentElement-&gt;firstChild-&gt;firstChild, TRUE);
              $method = isset($command['method']) ? $command['method'] : $ajax_settings['method'];
              // The "method" is a jQuery DOM manipulation function. Emulate
              // each one using PHP's DOMNode API.
              switch ($method) {
                case 'replaceWith':
                  $wrapperNode-&gt;parentNode-&gt;replaceChild($newNode, $wrapperNode);
                  break;
                case 'append':
                  $wrapperNode-&gt;appendChild($newNode);
                  break;
                case 'prepend':
                  // If no firstChild, insertBefore() falls back to
                  // appendChild().
                  $wrapperNode-&gt;insertBefore($newNode, $wrapperNode-&gt;firstChild);
                  break;
                case 'before':
                  $wrapperNode-&gt;parentNode-&gt;insertBefore($newNode, $wrapperNode);
                  break;
                case 'after':
                  // If no nextSibling, insertBefore() falls back to
                  // appendChild().
                  $wrapperNode-&gt;parentNode-&gt;insertBefore($newNode, $wrapperNode-&gt;nextSibling);
                  break;
                case 'html':
                  foreach ($wrapperNode-&gt;childNodes as $childNode) {
                    $wrapperNode-&gt;removeChild($childNode);
                  }
                  $wrapperNode-&gt;appendChild($newNode);
                  break;
              }
            }
            break;

          case 'updateBuildId':
            $buildId = $xpath-&gt;query('//input[@name="form_build_id" and @value="' . $command['old'] . '"]')-&gt;item(0);
            if ($buildId) {
</codefragment>
  </duplication>
  <duplication lines="71" tokens="109">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="2305"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="2104"/>
    <codefragment>    return $return;
  }

  /**
   * Runs cron in the Drupal installed by Simpletest.
   */
  protected function cronRun() {
    $this-&gt;drupalGet($GLOBALS['base_url'] . '/cron.php', array('external' =&gt; TRUE, 'query' =&gt; array('cron_key' =&gt; variable_get('cron_key', 'drupal'))));
  }

  /**
   * Check for meta refresh tag and if found call drupalGet() recursively. This
   * function looks for the http-equiv attribute to be set to "Refresh"
   * and is case-sensitive.
   *
   * @return
   *   Either the new page content or FALSE.
   */
  protected function checkForMetaRefresh() {
    if (strpos($this-&gt;drupalGetContent(), '&lt;meta ') &amp;&amp; $this-&gt;parse()) {
      $refresh = $this-&gt;xpath('//meta[@http-equiv="Refresh"]');
      if (!empty($refresh)) {
        // Parse the content attribute of the meta tag for the format:
        // "[delay]: URL=[page_to_redirect_to]".
        if (preg_match('/\d+;\s*URL=(?P&lt;url&gt;.*)/i', $refresh[0]['content'], $match)) {
          return $this-&gt;drupalGet($this-&gt;getAbsoluteUrl(decode_entities($match['url'])));
        }
      }
    }
    return FALSE;
  }

  /**
   * Retrieves only the headers for a Drupal path or an absolute path.
   *
   * @param $path
   *   Drupal path or URL to load into internal browser
   * @param $options
   *   Options to be forwarded to url().
   * @param $headers
   *   An array containing additional HTTP request headers, each formatted as
   *   "name: value".
   * @return
   *   The retrieved headers, also available as $this-&gt;drupalGetContent()
   */
  protected function drupalHead($path, array $options = array(), array $headers = array()) {
    $options['absolute'] = TRUE;
    $out = $this-&gt;curlExec(array(CURLOPT_NOBODY =&gt; TRUE, CURLOPT_URL =&gt; url($path, $options), CURLOPT_HTTPHEADER =&gt; $headers));
    $this-&gt;refreshVariables(); // Ensure that any changes to variables in the other thread are picked up.
    return $out;
  }

  /**
   * Handle form input related to drupalPost(). Ensure that the specified fields
   * exist and attempt to create POST data in the correct manner for the particular
   * field type.
   *
   * @param $post
   *   Reference to array of post values.
   * @param $edit
   *   Reference to array of edit values to be checked against the form.
   * @param $submit
   *   Form submit button value.
   * @param $form
   *   Array of form elements.
   * @return
   *   Submit value matches a valid submit input in the form.
   */
  protected function handleForm(&amp;$post, &amp;$edit, &amp;$upload, $submit, $form) {
    // Retrieve the form elements.
    $elements = $form-&gt;xpath('.//input[not(@disabled)]|.//textarea[not(@disabled)]|.//select[not(@disabled)]');
</codefragment>
  </duplication>
  <duplication lines="220" tokens="356">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="2398"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="2190"/>
    <codefragment>            $post[$name] = $edit[$name];
            unset($edit[$name]);
            break;
          case 'radio':
            if ($edit[$name] == $value) {
              $post[$name] = $edit[$name];
              unset($edit[$name]);
            }
            break;
          case 'checkbox':
            // To prevent checkbox from being checked.pass in a FALSE,
            // otherwise the checkbox will be set to its value regardless
            // of $edit.
            if ($edit[$name] === FALSE) {
              unset($edit[$name]);
              continue 2;
            }
            else {
              unset($edit[$name]);
              $post[$name] = $value;
            }
            break;
          case 'select':
            $new_value = $edit[$name];
            $options = $this-&gt;getAllOptions($element);
            if (is_array($new_value)) {
              // Multiple select box.
              if (!empty($new_value)) {
                $index = 0;
                $key = preg_replace('/\[\]$/', '', $name);
                foreach ($options as $option) {
                  $option_value = (string) $option['value'];
                  if (in_array($option_value, $new_value)) {
                    $post[$key . '[' . $index++ . ']'] = $option_value;
                    $done = TRUE;
                    unset($edit[$name]);
                  }
                }
              }
              else {
                // No options selected: do not include any POST data for the
                // element.
                $done = TRUE;
                unset($edit[$name]);
              }
            }
            else {
              // Single select box.
              foreach ($options as $option) {
                if ($new_value == $option['value']) {
                  $post[$name] = $new_value;
                  unset($edit[$name]);
                  $done = TRUE;
                  break;
                }
              }
            }
            break;
          case 'file':
            $upload[$name] = $edit[$name];
            unset($edit[$name]);
            break;
        }
      }
      if (!isset($post[$name]) &amp;&amp; !$done) {
        switch ($type) {
          case 'textarea':
            $post[$name] = (string) $element;
            break;
          case 'select':
            $single = empty($element['multiple']);
            $first = TRUE;
            $index = 0;
            $key = preg_replace('/\[\]$/', '', $name);
            $options = $this-&gt;getAllOptions($element);
            foreach ($options as $option) {
              // For single select, we load the first option, if there is a
              // selected option that will overwrite it later.
              if ($option['selected'] || ($first &amp;&amp; $single)) {
                $first = FALSE;
                if ($single) {
                  $post[$name] = (string) $option['value'];
                }
                else {
                  $post[$key . '[' . $index++ . ']'] = (string) $option['value'];
                }
              }
            }
            break;
          case 'file':
            break;
          case 'submit':
          case 'image':
            if (isset($submit) &amp;&amp; $submit == $value) {
              $post[$name] = $value;
              $submit_matches = TRUE;
            }
            break;
          case 'radio':
          case 'checkbox':
            if (!isset($element['checked'])) {
              break;
            }
            // Deliberate no break.
          default:
            $post[$name] = $value;
        }
      }
    }
    return $submit_matches;
  }

  /**
   * Builds an XPath query.
   *
   * Builds an XPath query by replacing placeholders in the query by the value
   * of the arguments.
   *
   * XPath 1.0 (the version supported by libxml2, the underlying XML library
   * used by PHP) doesn't support any form of quotation. This function
   * simplifies the building of XPath expression.
   *
   * @param $xpath
   *   An XPath query, possibly with placeholders in the form ':name'.
   * @param $args
   *   An array of arguments with keys in the form ':name' matching the
   *   placeholders in the query. The values may be either strings or numeric
   *   values.
   * @return
   *   An XPath query with arguments replaced.
   */
  protected function buildXPathQuery($xpath, array $args = array()) {
    // Replace placeholders.
    foreach ($args as $placeholder =&gt; $value) {
      // XPath 1.0 doesn't support a way to escape single or double quotes in a
      // string literal. We split double quotes out of the string, and encode
      // them separately.
      if (is_string($value)) {
        // Explode the text at the quote characters.
        $parts = explode('"', $value);

        // Quote the parts.
        foreach ($parts as &amp;$part) {
          $part = '"' . $part . '"';
        }

        // Return the string.
        $value = count($parts) &gt; 1 ? 'concat(' . implode(', \'"\', ', $parts) . ')' : $parts[0];
      }
      $xpath = preg_replace('/' . preg_quote($placeholder) . '\b/', $value, $xpath);
    }
    return $xpath;
  }

  /**
   * Perform an xpath search on the contents of the internal browser. The search
   * is relative to the root element (HTML tag normally) of the page.
   *
   * @param $xpath
   *   The xpath string to use in the search.
   * @return
   *   The return value of the xpath search. For details on the xpath string
   *   format and return values see the SimpleXML documentation,
   *   http://us.php.net/manual/function.simplexml-element-xpath.php.
   */
  protected function xpath($xpath, array $arguments = array()) {
    if ($this-&gt;parse()) {
      $xpath = $this-&gt;buildXPathQuery($xpath, $arguments);
      $result = $this-&gt;elements-&gt;xpath($xpath);
      // Some combinations of PHP / libxml versions return an empty array
      // instead of the documented FALSE. Forcefully convert any falsish values
      // to an empty array to allow foreach(...) constructions.
      return $result ? $result : array();
    }
    else {
      return FALSE;
    }
  }

  /**
   * Get all option elements, including nested options, in a select.
   *
   * @param $element
   *   The element for which to get the options.
   * @return
   *   Option elements in select.
   */
  protected function getAllOptions(SimpleXMLElement $element) {
    $options = array();
    // Add all options items.
    foreach ($element-&gt;option as $option) {
      $options[] = $option;
    }

    // Search option group children.
    if (isset($element-&gt;optgroup)) {
      foreach ($element-&gt;optgroup as $group) {
        $options = array_merge($options, $this-&gt;getAllOptions($group));
      }
    }
    return $options;
  }

  /**
   * Pass if a link with the specified label is found, and optional with the
   * specified index.
   *
   * @param $label
   *   Text between the anchor tags.
   * @param $index
   *   Link position counting from zero.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to, defaults to 'Other'.
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertLink($label, $index = 0, $message = '', $group = 'Other') {
    $links = $this-&gt;xpath('//a[normalize-space(text())=:label]', array(':label' =&gt; $label));
</codefragment>
  </duplication>
  <duplication lines="63" tokens="106">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="2635"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="2429"/>
    <codefragment>    $links = $this-&gt;xpath('//a[normalize-space(text())=:label]', array(':label' =&gt; $label));
    $message = ($message ?  $message : t('Link with label %label not found.', array('%label' =&gt; $label)));
    return $this-&gt;assert(empty($links), $message, $group);
  }

  /**
   * Pass if a link containing a given href (part) is found.
   *
   * @param $href
   *   The full or partial value of the 'href' attribute of the anchor tag.
   * @param $index
   *   Link position counting from zero.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to, defaults to 'Other'.
   *
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertLinkByHref($href, $index = 0, $message = '', $group = 'Other') {
    $links = $this-&gt;xpath('//a[contains(@href, :href)]', array(':href' =&gt; $href));
    $message = ($message ?  $message : t('Link containing href %href found.', array('%href' =&gt; $href)));
    return $this-&gt;assert(isset($links[$index]), $message, $group);
  }

  /**
   * Pass if a link containing a given href (part) is not found.
   *
   * @param $href
   *   The full or partial value of the 'href' attribute of the anchor tag.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to, defaults to 'Other'.
   *
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertNoLinkByHref($href, $message = '', $group = 'Other') {
    $links = $this-&gt;xpath('//a[contains(@href, :href)]', array(':href' =&gt; $href));
    $message = ($message ?  $message : t('No link containing href %href found.', array('%href' =&gt; $href)));
    return $this-&gt;assert(empty($links), $message, $group);
  }

  /**
   * Follows a link by name.
   *
   * Will click the first link found with this link text by default, or a later
   * one if an index is given. Match is case sensitive with normalized space.
   * The label is translated label. There is an assert for successful click.
   *
   * @param $label
   *   Text between the anchor tags.
   * @param $index
   *   Link position counting from zero.
   * @return
   *   Page on success, or FALSE on failure.
   */
  protected function clickLink($label, $index = 0) {
    $url_before = $this-&gt;getUrl();
    $urls = $this-&gt;xpath('//a[normalize-space(text())=:label]', array(':label' =&gt; $label));

</codefragment>
  </duplication>
  <duplication lines="504" tokens="731">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="2696"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="2491"/>
    <codefragment>    $urls = $this-&gt;xpath('//a[normalize-space(text())=:label]', array(':label' =&gt; $label));

    if (isset($urls[$index])) {
      $url_target = $this-&gt;getAbsoluteUrl($urls[$index]['href']);
    }

    $this-&gt;assertTrue(isset($urls[$index]), t('Clicked link %label (@url_target) from @url_before', array('%label' =&gt; $label, '@url_target' =&gt; $url_target, '@url_before' =&gt; $url_before)), t('Browser'));

    if (isset($url_target)) {
      return $this-&gt;drupalGet($url_target);
    }
    return FALSE;
  }

  /**
   * Takes a path and returns an absolute path.
   *
   * @param $path
   *   A path from the internal browser content.
   * @return
   *   The $path with $base_url prepended, if necessary.
   */
  protected function getAbsoluteUrl($path) {
    global $base_url, $base_path;

    $parts = parse_url($path);
    if (empty($parts['host'])) {
      // Ensure that we have a string (and no xpath object).
      $path = (string) $path;
      // Strip $base_path, if existent.
      $length = strlen($base_path);
      if (substr($path, 0, $length) === $base_path) {
        $path = substr($path, $length);
      }
      // Ensure that we have an absolute path.
      if ($path[0] !== '/') {
        $path = '/' . $path;
      }
      // Finally, prepend the $base_url.
      $path = $base_url . $path;
    }
    return $path;
  }

  /**
   * Get the current URL from the cURL handler.
   *
   * @return
   *   The current URL.
   */
  protected function getUrl() {
    return $this-&gt;url;
  }

  /**
   * Gets the HTTP response headers of the requested page. Normally we are only
   * interested in the headers returned by the last request. However, if a page
   * is redirected or HTTP authentication is in use, multiple requests will be
   * required to retrieve the page. Headers from all requests may be requested
   * by passing TRUE to this function.
   *
   * @param $all_requests
   *   Boolean value specifying whether to return headers from all requests
   *   instead of just the last request. Defaults to FALSE.
   * @return
   *   A name/value array if headers from only the last request are requested.
   *   If headers from all requests are requested, an array of name/value
   *   arrays, one for each request.
   *
   *   The pseudonym ":status" is used for the HTTP status line.
   *
   *   Values for duplicate headers are stored as a single comma-separated list.
   */
  protected function drupalGetHeaders($all_requests = FALSE) {
    $request = 0;
    $headers = array($request =&gt; array());
    foreach ($this-&gt;headers as $header) {
      $header = trim($header);
      if ($header === '') {
        $request++;
      }
      else {
        if (strpos($header, 'HTTP/') === 0) {
          $name = ':status';
          $value = $header;
        }
        else {
          list($name, $value) = explode(':', $header, 2);
          $name = strtolower($name);
        }
        if (isset($headers[$request][$name])) {
          $headers[$request][$name] .= ',' . trim($value);
        }
        else {
          $headers[$request][$name] = trim($value);
        }
      }
    }
    if (!$all_requests) {
      $headers = array_pop($headers);
    }
    return $headers;
  }

  /**
   * Gets the value of an HTTP response header. If multiple requests were
   * required to retrieve the page, only the headers from the last request will
   * be checked by default. However, if TRUE is passed as the second argument,
   * all requests will be processed from last to first until the header is
   * found.
   *
   * @param $name
   *   The name of the header to retrieve. Names are case-insensitive (see RFC
   *   2616 section 4.2).
   * @param $all_requests
   *   Boolean value specifying whether to check all requests if the header is
   *   not found in the last request. Defaults to FALSE.
   * @return
   *   The HTTP header value or FALSE if not found.
   */
  protected function drupalGetHeader($name, $all_requests = FALSE) {
    $name = strtolower($name);
    $header = FALSE;
    if ($all_requests) {
      foreach (array_reverse($this-&gt;drupalGetHeaders(TRUE)) as $headers) {
        if (isset($headers[$name])) {
          $header = $headers[$name];
          break;
        }
      }
    }
    else {
      $headers = $this-&gt;drupalGetHeaders();
      if (isset($headers[$name])) {
        $header = $headers[$name];
      }
    }
    return $header;
  }

  /**
   * Gets the current raw HTML of requested page.
   */
  protected function drupalGetContent() {
    return $this-&gt;content;
  }

  /**
   * Gets the value of the Drupal.settings JavaScript variable for the currently loaded page.
   */
  protected function drupalGetSettings() {
    return $this-&gt;drupalSettings;
  }

  /**
   * Gets an array containing all e-mails sent during this test case.
   *
   * @param $filter
   *   An array containing key/value pairs used to filter the e-mails that are returned.
   * @return
   *   An array containing e-mail messages captured during the current test.
   */
  protected function drupalGetMails($filter = array()) {
    $captured_emails = variable_get('drupal_test_email_collector', array());
    $filtered_emails = array();

    foreach ($captured_emails as $message) {
      foreach ($filter as $key =&gt; $value) {
        if (!isset($message[$key]) || $message[$key] != $value) {
          continue 2;
        }
      }
      $filtered_emails[] = $message;
    }

    return $filtered_emails;
  }

  /**
   * Sets the raw HTML content. This can be useful when a page has been fetched
   * outside of the internal browser and assertions need to be made on the
   * returned page.
   *
   * A good example would be when testing drupal_http_request(). After fetching
   * the page the content can be set and page elements can be checked to ensure
   * that the function worked properly.
   */
  protected function drupalSetContent($content, $url = 'internal:') {
    $this-&gt;content = $content;
    $this-&gt;url = $url;
    $this-&gt;plainTextContent = FALSE;
    $this-&gt;elements = FALSE;
    $this-&gt;drupalSettings = array();
    if (preg_match('/jQuery\.extend\(Drupal\.settings, (.*?)\);/', $content, $matches)) {
      $this-&gt;drupalSettings = drupal_json_decode($matches[1]);
    }
  }

  /**
   * Sets the value of the Drupal.settings JavaScript variable for the currently loaded page.
   */
  protected function drupalSetSettings($settings) {
    $this-&gt;drupalSettings = $settings;
  }

  /**
   * Pass if the internal browser's URL matches the given path.
   *
   * @param $path
   *   The expected system path.
   * @param $options
   *   (optional) Any additional options to pass for $path to url().
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to, defaults to 'Other'.
   *
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertUrl($path, array $options = array(), $message = '', $group = 'Other') {
    if (!$message) {
      $message = t('Current URL is @url.', array(
        '@url' =&gt; var_export(url($path, $options), TRUE),
      ));
    }
    $options['absolute'] = TRUE;
    return $this-&gt;assertEqual($this-&gt;getUrl(), url($path, $options), $message, $group);
  }

  /**
   * Pass if the raw text IS found on the loaded page, fail otherwise. Raw text
   * refers to the raw HTML that the page generated.
   *
   * @param $raw
   *   Raw (HTML) string to look for.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to, defaults to 'Other'.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertRaw($raw, $message = '', $group = 'Other') {
    if (!$message) {
      $message = t('Raw "@raw" found', array('@raw' =&gt; $raw));
    }
    return $this-&gt;assert(strpos($this-&gt;drupalGetContent(), $raw) !== FALSE, $message, $group);
  }

  /**
   * Pass if the raw text is NOT found on the loaded page, fail otherwise. Raw text
   * refers to the raw HTML that the page generated.
   *
   * @param $raw
   *   Raw (HTML) string to look for.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to, defaults to 'Other'.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoRaw($raw, $message = '', $group = 'Other') {
    if (!$message) {
      $message = t('Raw "@raw" not found', array('@raw' =&gt; $raw));
    }
    return $this-&gt;assert(strpos($this-&gt;drupalGetContent(), $raw) === FALSE, $message, $group);
  }

  /**
   * Pass if the text IS found on the text version of the page. The text version
   * is the equivalent of what a user would see when viewing through a web browser.
   * In other words the HTML has been filtered out of the contents.
   *
   * @param $text
   *   Plain text to look for.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to, defaults to 'Other'.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertText($text, $message = '', $group = 'Other') {
    return $this-&gt;assertTextHelper($text, $message, $group, FALSE);
  }

  /**
   * Pass if the text is NOT found on the text version of the page. The text version
   * is the equivalent of what a user would see when viewing through a web browser.
   * In other words the HTML has been filtered out of the contents.
   *
   * @param $text
   *   Plain text to look for.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to, defaults to 'Other'.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoText($text, $message = '', $group = 'Other') {
    return $this-&gt;assertTextHelper($text, $message, $group, TRUE);
  }

  /**
   * Helper for assertText and assertNoText.
   *
   * It is not recommended to call this function directly.
   *
   * @param $text
   *   Plain text to look for.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to.
   * @param $not_exists
   *   TRUE if this text should not exist, FALSE if it should.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertTextHelper($text, $message = '', $group, $not_exists) {
    if ($this-&gt;plainTextContent === FALSE) {
      $this-&gt;plainTextContent = filter_xss($this-&gt;drupalGetContent(), array());
    }
    if (!$message) {
      $message = !$not_exists ? t('"@text" found', array('@text' =&gt; $text)) : t('"@text" not found', array('@text' =&gt; $text));
    }
    return $this-&gt;assert($not_exists == (strpos($this-&gt;plainTextContent, $text) === FALSE), $message, $group);
  }

  /**
   * Pass if the text is found ONLY ONCE on the text version of the page.
   *
   * The text version is the equivalent of what a user would see when viewing
   * through a web browser. In other words the HTML has been filtered out of
   * the contents.
   *
   * @param $text
   *   Plain text to look for.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to, defaults to 'Other'.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertUniqueText($text, $message = '', $group = 'Other') {
    return $this-&gt;assertUniqueTextHelper($text, $message, $group, TRUE);
  }

  /**
   * Pass if the text is found MORE THAN ONCE on the text version of the page.
   *
   * The text version is the equivalent of what a user would see when viewing
   * through a web browser. In other words the HTML has been filtered out of
   * the contents.
   *
   * @param $text
   *   Plain text to look for.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to, defaults to 'Other'.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoUniqueText($text, $message = '', $group = 'Other') {
    return $this-&gt;assertUniqueTextHelper($text, $message, $group, FALSE);
  }

  /**
   * Helper for assertUniqueText and assertNoUniqueText.
   *
   * It is not recommended to call this function directly.
   *
   * @param $text
   *   Plain text to look for.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to.
   * @param $be_unique
   *   TRUE if this text should be found only once, FALSE if it should be found more than once.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertUniqueTextHelper($text, $message = '', $group, $be_unique) {
    if ($this-&gt;plainTextContent === FALSE) {
      $this-&gt;plainTextContent = filter_xss($this-&gt;drupalGetContent(), array());
    }
    if (!$message) {
      $message = '"' . $text . '"' . ($be_unique ? ' found only once' : ' found more than once');
    }
    $first_occurance = strpos($this-&gt;plainTextContent, $text);
    if ($first_occurance === FALSE) {
      return $this-&gt;assert(FALSE, $message, $group);
    }
    $offset = $first_occurance + strlen($text);
    $second_occurance = strpos($this-&gt;plainTextContent, $text, $offset);
    return $this-&gt;assert($be_unique == ($second_occurance === FALSE), $message, $group);
  }

  /**
   * Will trigger a pass if the Perl regex pattern is found in the raw content.
   *
   * @param $pattern
   *   Perl regex to look for including the regex delimiters.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertPattern($pattern, $message = '', $group = 'Other') {
    if (!$message) {
      $message = t('Pattern "@pattern" found', array('@pattern' =&gt; $pattern));
    }
    return $this-&gt;assert((bool) preg_match($pattern, $this-&gt;drupalGetContent()), $message, $group);
  }

  /**
   * Will trigger a pass if the perl regex pattern is not present in raw content.
   *
   * @param $pattern
   *   Perl regex to look for including the regex delimiters.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoPattern($pattern, $message = '', $group = 'Other') {
    if (!$message) {
      $message = t('Pattern "@pattern" not found', array('@pattern' =&gt; $pattern));
    }
    return $this-&gt;assert(!preg_match($pattern, $this-&gt;drupalGetContent()), $message, $group);
  }

  /**
   * Pass if the page title is the given string.
   *
   * @param $title
   *   The string the title should be.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertTitle($title, $message = '', $group = 'Other') {
    $actual = (string) current($this-&gt;xpath('//title'));
    if (!$message) {
      $message = t('Page title @actual is equal to @expected.', array(
        '@actual' =&gt; var_export($actual, TRUE),
        '@expected' =&gt; var_export($title, TRUE),
      ));
    }
    return $this-&gt;assertEqual($actual, $title, $message, $group);
  }

  /**
   * Pass if the page title is not the given string.
   *
   * @param $title
   *   The string the title should not be.
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoTitle($title, $message = '', $group = 'Other') {
    $actual = (string) current($this-&gt;xpath('//title'));
    if (!$message) {
      $message = t('Page title @actual is not equal to @unexpected.', array(
        '@actual' =&gt; var_export($actual, TRUE),
        '@unexpected' =&gt; var_export($title, TRUE),
      ));
    }
    return $this-&gt;assertNotEqual($actual, $title, $message, $group);
  }

  /**
   * Asserts themed output.
   *
   * @param $callback
   *   The name of the theme function to invoke; e.g. 'links' for theme_links().
   * @param $variables
   *   (optional) An array of variables to pass to the theme function.
   * @param $expected
   *   The expected themed output string.
   * @param $message
   *   (optional) A message to display with the assertion. Do not translate
   *   messages: use format_string() to embed variables in the message text, not
   *   t(). If left blank, a default message will be displayed.
   * @param $group
   *   (optional) The group this message is in, which is displayed in a column
   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
</codefragment>
  </duplication>
  <duplication lines="124" tokens="171">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="3217"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="2976"/>
    <codefragment>    return $this-&gt;assertIdentical($output, $expected, $message, $group);
  }

  /**
   * Asserts that a field exists in the current page by the given XPath.
   *
   * @param $xpath
   *   XPath used to find the field.
   * @param $value
   *   (optional) Value of the field to assert. You may pass in NULL (default)
   *   to skip checking the actual value, while still checking that the field
   *   exists.
   * @param $message
   *   (optional) Message to display.
   * @param $group
   *   (optional) The group this message belongs to.
   *
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertFieldByXPath($xpath, $value = NULL, $message = '', $group = 'Other') {
    $fields = $this-&gt;xpath($xpath);

    // If value specified then check array for match.
    $found = TRUE;
    if (isset($value)) {
      $found = FALSE;
      if ($fields) {
        foreach ($fields as $field) {
          if (isset($field['value']) &amp;&amp; $field['value'] == $value) {
            // Input element with correct value.
            $found = TRUE;
          }
          elseif (isset($field-&gt;option)) {
            // Select element found.
            if ($this-&gt;getSelectedItem($field) == $value) {
              $found = TRUE;
            }
            else {
              // No item selected so use first item.
              $items = $this-&gt;getAllOptions($field);
              if (!empty($items) &amp;&amp; $items[0]['value'] == $value) {
                $found = TRUE;
              }
            }
          }
          elseif ((string) $field == $value) {
            // Text area with correct text.
            $found = TRUE;
          }
        }
      }
    }
    return $this-&gt;assertTrue($fields &amp;&amp; $found, $message, $group);
  }

  /**
   * Get the selected value from a select field.
   *
   * @param $element
   *   SimpleXMLElement select element.
   * @return
   *   The selected value or FALSE.
   */
  protected function getSelectedItem(SimpleXMLElement $element) {
    foreach ($element-&gt;children() as $item) {
      if (isset($item['selected'])) {
        return $item['value'];
      }
      elseif ($item-&gt;getName() == 'optgroup') {
        if ($value = $this-&gt;getSelectedItem($item)) {
          return $value;
        }
      }
    }
    return FALSE;
  }

  /**
   * Asserts that a field doesn't exist or its value doesn't match, by XPath.
   *
   * @param $xpath
   *   XPath used to find the field.
   * @param $value
   *   (optional) Value for the field, to assert that the field's value on the
   *   page doesn't match it. You may pass in NULL to skip checking the
   *   value, while still checking that the field doesn't exist.
   * @param $message
   *   (optional) Message to display.
   * @param $group
   *   (optional) The group this message belongs to.
   *
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoFieldByXPath($xpath, $value = NULL, $message = '', $group = 'Other') {
    $fields = $this-&gt;xpath($xpath);

    // If value specified then check array for match.
    $found = TRUE;
    if (isset($value)) {
      $found = FALSE;
      if ($fields) {
        foreach ($fields as $field) {
          if ($field['value'] == $value) {
            $found = TRUE;
          }
        }
      }
    }
    return $this-&gt;assertFalse($fields &amp;&amp; $found, $message, $group);
  }

  /**
   * Asserts that a field exists in the current page with the given name and value.
   *
   * @param $name
   *   Name of field to assert.
   * @param $value
   *   (optional) Value of the field to assert. You may pass in NULL (default)
   *   to skip checking the actual value, while still checking that the field
   *   exists.
   * @param $message
   *   Message to display.
</codefragment>
  </duplication>
  <duplication lines="315" tokens="621">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="3360"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="3100"/>
    <codefragment>    return $this-&gt;assertFieldByXPath($this-&gt;constructFieldXpath('name', $name), $value, $message, t('Browser'));
  }

  /**
   * Asserts that a field does not exist with the given name and value.
   *
   * @param $name
   *   Name of field to assert.
   * @param $value
   *   (optional) Value for the field, to assert that the field's value on the
   *   page doesn't match it. You may pass in NULL to skip checking the
   *   value, while still checking that the field doesn't exist. However, the
   *   default value ('') asserts that the field value is not an empty string.
   * @param $message
   *   (optional) Message to display.
   * @param $group
   *   The group this message belongs to.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoFieldByName($name, $value = '', $message = '') {
    return $this-&gt;assertNoFieldByXPath($this-&gt;constructFieldXpath('name', $name), $value, $message ? $message : t('Did not find field by name @name', array('@name' =&gt; $name)), t('Browser'));
  }

  /**
   * Asserts that a field exists in the current page with the given ID and value.
   *
   * @param $id
   *   ID of field to assert.
   * @param $value
   *   (optional) Value for the field to assert. You may pass in NULL to skip
   *   checking the value, while still checking that the field exists.
   *   However, the default value ('') asserts that the field value is an empty
   *   string.
   * @param $message
   *   (optional) Message to display.
   * @param $group
   *   The group this message belongs to.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertFieldById($id, $value = '', $message = '') {
    return $this-&gt;assertFieldByXPath($this-&gt;constructFieldXpath('id', $id), $value, $message ? $message : t('Found field by id @id', array('@id' =&gt; $id)), t('Browser'));
  }

  /**
   * Asserts that a field does not exist with the given ID and value.
   *
   * @param $id
   *   ID of field to assert.
   * @param $value
   *   (optional) Value for the field, to assert that the field's value on the
   *   page doesn't match it. You may pass in NULL to skip checking the value,
   *   while still checking that the field doesn't exist. However, the default
   *   value ('') asserts that the field value is not an empty string.
   * @param $message
   *   (optional) Message to display.
   * @param $group
   *   The group this message belongs to.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoFieldById($id, $value = '', $message = '') {
    return $this-&gt;assertNoFieldByXPath($this-&gt;constructFieldXpath('id', $id), $value, $message ? $message : t('Did not find field by id @id', array('@id' =&gt; $id)), t('Browser'));
  }

  /**
   * Asserts that a checkbox field in the current page is checked.
   *
   * @param $id
   *   ID of field to assert.
   * @param $message
   *   (optional) Message to display.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertFieldChecked($id, $message = '') {
    $elements = $this-&gt;xpath('//input[@id=:id]', array(':id' =&gt; $id));
    return $this-&gt;assertTrue(isset($elements[0]) &amp;&amp; !empty($elements[0]['checked']), $message ? $message : t('Checkbox field @id is checked.', array('@id' =&gt; $id)), t('Browser'));
  }

  /**
   * Asserts that a checkbox field in the current page is not checked.
   *
   * @param $id
   *   ID of field to assert.
   * @param $message
   *   (optional) Message to display.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoFieldChecked($id, $message = '') {
    $elements = $this-&gt;xpath('//input[@id=:id]', array(':id' =&gt; $id));
    return $this-&gt;assertTrue(isset($elements[0]) &amp;&amp; empty($elements[0]['checked']), $message ? $message : t('Checkbox field @id is not checked.', array('@id' =&gt; $id)), t('Browser'));
  }

  /**
   * Asserts that a select option in the current page is checked.
   *
   * @param $id
   *   ID of select field to assert.
   * @param $option
   *   Option to assert.
   * @param $message
   *   (optional) Message to display.
   * @return
   *   TRUE on pass, FALSE on fail.
   *
   * @todo $id is unusable. Replace with $name.
   */
  protected function assertOptionSelected($id, $option, $message = '') {
    $elements = $this-&gt;xpath('//select[@id=:id]//option[@value=:option]', array(':id' =&gt; $id, ':option' =&gt; $option));
    return $this-&gt;assertTrue(isset($elements[0]) &amp;&amp; !empty($elements[0]['selected']), $message ? $message : t('Option @option for field @id is selected.', array('@option' =&gt; $option, '@id' =&gt; $id)), t('Browser'));
  }

  /**
   * Asserts that a select option in the current page is not checked.
   *
   * @param $id
   *   ID of select field to assert.
   * @param $option
   *   Option to assert.
   * @param $message
   *   (optional) Message to display.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoOptionSelected($id, $option, $message = '') {
    $elements = $this-&gt;xpath('//select[@id=:id]//option[@value=:option]', array(':id' =&gt; $id, ':option' =&gt; $option));
    return $this-&gt;assertTrue(isset($elements[0]) &amp;&amp; empty($elements[0]['selected']), $message ? $message : t('Option @option for field @id is not selected.', array('@option' =&gt; $option, '@id' =&gt; $id)), t('Browser'));
  }

  /**
   * Asserts that a field exists with the given name or ID.
   *
   * @param $field
   *   Name or ID of field to assert.
   * @param $message
   *   (optional) Message to display.
   * @param $group
   *   The group this message belongs to.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertField($field, $message = '', $group = 'Other') {
    return $this-&gt;assertFieldByXPath($this-&gt;constructFieldXpath('name', $field) . '|' . $this-&gt;constructFieldXpath('id', $field), NULL, $message, $group);
  }

  /**
   * Asserts that a field does not exist with the given name or ID.
   *
   * @param $field
   *   Name or ID of field to assert.
   * @param $message
   *   (optional) Message to display.
   * @param $group
   *   The group this message belongs to.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoField($field, $message = '', $group = 'Other') {
    return $this-&gt;assertNoFieldByXPath($this-&gt;constructFieldXpath('name', $field) . '|' . $this-&gt;constructFieldXpath('id', $field), NULL, $message, $group);
  }

  /**
   * Asserts that each HTML ID is used for just a single element.
   *
   * @param $message
   *   Message to display.
   * @param $group
   *   The group this message belongs to.
   * @param $ids_to_skip
   *   An optional array of ids to skip when checking for duplicates. It is
   *   always a bug to have duplicate HTML IDs, so this parameter is to enable
   *   incremental fixing of core code. Whenever a test passes this parameter,
   *   it should add a "todo" comment above the call to this function explaining
   *   the legacy bug that the test wishes to ignore and including a link to an
   *   issue that is working to fix that legacy bug.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoDuplicateIds($message = '', $group = 'Other', $ids_to_skip = array()) {
    $status = TRUE;
    foreach ($this-&gt;xpath('//*[@id]') as $element) {
      $id = (string) $element['id'];
      if (isset($seen_ids[$id]) &amp;&amp; !in_array($id, $ids_to_skip)) {
        $this-&gt;fail(t('The HTML ID %id is unique.', array('%id' =&gt; $id)), $group);
        $status = FALSE;
      }
      $seen_ids[$id] = TRUE;
    }
    return $this-&gt;assert($status, $message, $group);
  }

  /**
   * Helper function: construct an XPath for the given set of attributes and value.
   *
   * @param $attribute
   *   Field attributes.
   * @param $value
   *   Value of field.
   * @return
   *   XPath for specified values.
   */
  protected function constructFieldXpath($attribute, $value) {
    $xpath = '//textarea[@' . $attribute . '=:value]|//input[@' . $attribute . '=:value]|//select[@' . $attribute . '=:value]';
    return $this-&gt;buildXPathQuery($xpath, array(':value' =&gt; $value));
  }

  /**
   * Asserts the page responds with the specified response code.
   *
   * @param $code
   *   Response code. For example 200 is a successful page request. For a list
   *   of all codes see http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html.
   * @param $message
   *   Message to display.
   * @return
   *   Assertion result.
   */
  protected function assertResponse($code, $message = '') {
    $curl_code = curl_getinfo($this-&gt;curlHandle, CURLINFO_HTTP_CODE);
    $match = is_array($code) ? in_array($curl_code, $code) : $curl_code == $code;
    return $this-&gt;assertTrue($match, $message ? $message : t('HTTP response expected !code, actual !curl_code', array('!code' =&gt; $code, '!curl_code' =&gt; $curl_code)), t('Browser'));
  }

  /**
   * Asserts the page did not return the specified response code.
   *
   * @param $code
   *   Response code. For example 200 is a successful page request. For a list
   *   of all codes see http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html.
   * @param $message
   *   Message to display.
   *
   * @return
   *   Assertion result.
   */
  protected function assertNoResponse($code, $message = '') {
    $curl_code = curl_getinfo($this-&gt;curlHandle, CURLINFO_HTTP_CODE);
    $match = is_array($code) ? in_array($curl_code, $code) : $curl_code == $code;
    return $this-&gt;assertFalse($match, $message ? $message : t('HTTP response not expected !code, actual !curl_code', array('!code' =&gt; $code, '!curl_code' =&gt; $curl_code)), t('Browser'));
  }

  /**
   * Asserts that the most recently sent e-mail message has the given value.
   *
   * The field in $name must have the content described in $value.
   *
   * @param $name
   *   Name of field or message property to assert. Examples: subject, body, id, ...
   * @param $value
   *   Value of the field to assert.
   * @param $message
   *   Message to display.
   *
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertMail($name, $value = '', $message = '') {
    $captured_emails = variable_get('drupal_test_email_collector', array());
    $email = end($captured_emails);
    return $this-&gt;assertTrue($email &amp;&amp; isset($email[$name]) &amp;&amp; $email[$name] == $value, $message, t('E-mail'));
  }

  /**
   * Asserts that the most recently sent e-mail message has the string in it.
   *
   * @param $field_name
   *   Name of field or message property to assert: subject, body, id, ...
   * @param $string
   *   String to search for.
   * @param $email_depth
   *   Number of emails to search for string, starting with most recent.
   *
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertMailString($field_name, $string, $email_depth) {
    $mails = $this-&gt;drupalGetMails();
    $string_found = FALSE;
    for ($i = sizeof($mails) -1; $i &gt;= sizeof($mails) - $email_depth &amp;&amp; $i &gt;= 0; $i--) {
      $mail = $mails[$i];
      // Normalize whitespace, as we don't know what the mail system might have
      // done. Any run of whitespace becomes a single space.
      $normalized_mail = preg_replace('/\s+/', ' ', $mail[$field_name]);
      $normalized_string = preg_replace('/\s+/', ' ', $string);
      $string_found = (FALSE !== strpos($normalized_mail, $normalized_string));
      if ($string_found) {
        break;
      }
    }
    return $this-&gt;assertTrue($string_found, t('Expected text found in @field of email message: "@expected".', array('@field' =&gt; $field_name, '@expected' =&gt; $string)));
  }

  /**
   * Asserts that the most recently sent e-mail message has the pattern in it.
   *
   * @param $field_name
   *   Name of field or message property to assert: subject, body, id, ...
   * @param $regex
   *   Pattern to search for.
   *
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertMailPattern($field_name, $regex, $message) {
    $mails = $this-&gt;drupalGetMails();
    $mail = end($mails);
    $regex_found = preg_match("/$regex/", $mail[$field_name]);
    return $this-&gt;assertTrue($regex_found, t('Expected text found in @field of email message: "@expected".', array('@field' =&gt; $field_name, '@expected' =&gt; $regex)));
  }

  /**
   * Outputs to verbose the most recent $count emails sent.
</codefragment>
  </duplication>
  <duplication lines="26" tokens="85">
    <file path="C:\wamp\www\Test\modules\simpletest\drupal_web_test_case.php" line="3708"/>
    <file path="C:\wamp\www\Test\sites\all\modules\simpletest\drupal_web_test_case.php" line="3775"/>
    <codefragment>function simpletest_verbose($message, $original_file_directory = NULL, $test_class = NULL) {
  static $file_directory = NULL, $class = NULL, $id = 1, $verbose = NULL;

  // Will pass first time during setup phase, and when verbose is TRUE.
  if (!isset($original_file_directory) &amp;&amp; !$verbose) {
    return FALSE;
  }

  if ($message &amp;&amp; $file_directory) {
    $message = '&lt;hr /&gt;ID #' . $id . ' (&lt;a href="' . $class . '-' . ($id - 1) . '.html"&gt;Previous&lt;/a&gt; | &lt;a href="' . $class . '-' . ($id + 1) . '.html"&gt;Next&lt;/a&gt;)&lt;hr /&gt;' . $message;
    file_put_contents($file_directory . "/simpletest/verbose/$class-$id.html", $message, FILE_APPEND);
    return $id++;
  }

  if ($original_file_directory) {
    $file_directory = $original_file_directory;
    $class = $test_class;
    $verbose = variable_get('simpletest_verbose', TRUE);
    $directory = $file_directory . '/simpletest/verbose';
    $writable = file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
    if ($writable &amp;&amp; !file_exists($directory . '/.htaccess')) {
      file_put_contents($directory . '/.htaccess', "&lt;IfModule mod_expires.c&gt;\nExpiresActive Off\n&lt;/IfModule&gt;\n");
    }
    return $writable;
  }
  return FALSE;
</codefragment>
  </duplication>
</pmd-cpd>
